import yargs from 'yargs';

/**
 * Sets global variable snaps which tracks user settings:
 * watch mode activation, verbose errors messages, and whether to suppress warnings.
 *
 * @param {Argument} argv - arguments as an object generated by yargs
 */
export function assignGlobals(argv: yargs.Arguments<{
  verboseErrors: boolean;
} & {
  suppressWarnings: boolean;
}>) {
  if (['w', 'watch'].includes(argv._[0] as string)) {
    global.snaps.isWatching = true;
  }
  if (Object.prototype.hasOwnProperty.call(argv, 'verboseErrors')) {
    global.snaps.verboseErrors = Boolean(argv.verboseErrors);
  }
  if (Object.prototype.hasOwnProperty.call(argv, 'suppressWarnings')) {
    global.snaps.suppressWarnings = Boolean(argv.suppressWarnings);
  }
}

/**
   * Sanitizes inputs. Currently normalizes paths.
   *
   * @param {Argument} argv - arguments as an object generated by yargs
   */
export function sanitizeInputs(argv: yargs.Arguments<{
  verboseErrors: boolean;
} & {
  suppressWarnings: boolean;
}>) {
  Object.keys(argv).forEach((key) => {
    if (typeof argv[key] === 'string') {
      if (argv[key] === './') {
        argv[key] = '.';
      } else if ((argv[key] as string).startsWith('./')) {
        argv[key] = (argv[key] as string).substring(2);
      }
    }
  });
}
