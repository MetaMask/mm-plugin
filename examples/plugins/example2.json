{
  "bundle": "!function(){const SES=function(){const e={},n={exports:e};return function(){!function(t,r){\"object\"==typeof e&&void 0!==n?n.exports=r():\"function\"==typeof define&&define.amd?define(r):(t=t||self).SES=r()}(this,(function(){\"use strict\";function e(e,n){const t=`please report internal shim error: ${e}`;throw console.error(t),n&&(console.error(`${n}`),console.error(`${n.stack}`)),t}function n(n,t){n||e(t)}function t(e){return e=(e=e.replace(/\\(0,[^)]+\\)/g,\"(0, eval)\")).replace(/cov_[^+]+\\+\\+[;,]/g,\"\")}function r(e,n){const{initRootRealm:t,initCompartment:r,getRealmGlobal:o,realmEvaluate:a}=n,{create:i,defineProperties:s}=Object,c=new Map([[\"EvalError\",EvalError],[\"RangeError\",RangeError],[\"ReferenceError\",ReferenceError],[\"SyntaxError\",SyntaxError],[\"TypeError\",TypeError],[\"URIError\",URIError]]);function l(e,...n){try{return e(...n)}catch(e){if(Object(e)!==e)throw e;let n,t,r;try{n=`${e.name}`,t=`${e.message}`,r=`${e.stack||t}`}catch(e){throw new Error(\"unknown error\")}const o=c.get(n)||Error;try{throw new o(t)}catch(e){throw e.stack=r,e}}}class p{constructor(){throw new TypeError(\"Realm is not a constructor\")}static makeRootRealm(n={}){const r=i(p.prototype);return l(t,e,r,n),r}static makeCompartment(n={}){const t=i(p.prototype);return l(r,e,t,n),t}get global(){return l(o,this)}evaluate(e,n,t={}){return l(a,this,e,n,t)}}return s(p,{toString:{value:()=>\"function Realm() { [shim code] }\",writable:!1,enumerable:!1,configurable:!0}}),s(p.prototype,{toString:{value:()=>\"[object Realm]\",writable:!1,enumerable:!1,configurable:!0}}),p}const o=t(`'use strict'; (${r})`);const{assign:a,create:i,freeze:s,defineProperties:c,getOwnPropertyDescriptor:l,getOwnPropertyDescriptors:p,getOwnPropertyNames:u,getPrototypeOf:h,setPrototypeOf:d}=Object,{apply:f,ownKeys:y}=Reflect,m=e=>(n,...t)=>f(e,n,t),g=m(Object.prototype.hasOwnProperty),b=m(Array.prototype.filter),w=m(Array.prototype.pop),E=m(Array.prototype.join),S=m(Array.prototype.concat),v=m(RegExp.prototype.test),j=m(String.prototype.includes),I=[\"Infinity\",\"NaN\",\"undefined\"],O=[\"isFinite\",\"isNaN\",\"parseFloat\",\"parseInt\",\"decodeURI\",\"decodeURIComponent\",\"encodeURI\",\"encodeURIComponent\",\"Array\",\"ArrayBuffer\",\"Boolean\",\"DataView\",\"EvalError\",\"Float32Array\",\"Float64Array\",\"Int8Array\",\"Int16Array\",\"Int32Array\",\"Map\",\"Number\",\"Object\",\"RangeError\",\"ReferenceError\",\"Set\",\"String\",\"Symbol\",\"SyntaxError\",\"TypeError\",\"Uint8Array\",\"Uint8ClampedArray\",\"Uint16Array\",\"Uint32Array\",\"URIError\",\"WeakMap\",\"WeakSet\",\"JSON\",\"Math\",\"Reflect\",\"escape\",\"unescape\"],P=[\"Date\",\"Error\",\"Promise\",\"Proxy\",\"RegExp\",\"Intl\"];function A(){const{defineProperty:e,defineProperties:n,getOwnPropertyDescriptor:t,getPrototypeOf:r,prototype:o}=Object;try{(0,o.__lookupGetter__)(\"x\")}catch(e){return}function a(e){if(null==e)throw new TypeError(\"can't convert undefined or null to object\");return Object(e)}function i(e){return\"symbol\"==typeof e?e:`${e}`}function s(e,n){if(\"function\"!=typeof e)throw TypeError(`invalid ${n} usage`);return e}n(o,{__defineGetter__:{value:function(n,t){const r=a(this);e(r,n,{get:s(t,\"getter\"),enumerable:!0,configurable:!0})}},__defineSetter__:{value:function(n,t){const r=a(this);e(r,n,{set:s(t,\"setter\"),enumerable:!0,configurable:!0})}},__lookupGetter__:{value:function(e){let n,o=a(this);for(e=i(e);o&&!(n=t(o,e));)o=r(o);return n&&n.get}},__lookupSetter__:{value:function(e){let n,o=a(this);for(e=i(e);o&&!(n=t(o,e));)o=r(o);return n&&n.set}}})}function T(){const{defineProperties:e,getPrototypeOf:n,setPrototypeOf:t}=Object;function r(r,o){let a;try{a=(0,eval)(o)}catch(e){if(e instanceof SyntaxError)return;throw e}const i=n(a),s=function(){throw new TypeError(\"Not available\")};e(s,{name:{value:r}}),e(i,{constructor:{value:s}}),e(s,{prototype:{value:i}}),s!==Function.prototype.constructor&&t(s,Function.prototype.constructor)}r(\"Function\",\"(function(){})\"),r(\"GeneratorFunction\",\"(function*(){})\"),r(\"AsyncFunction\",\"(async function(){})\"),r(\"AsyncGeneratorFunction\",\"(async function*(){})\")}const R=\"'use strict'; this\",_=\"(0, eval)(\\\"'use strict'; this\\\")\";const x=()=>{const e=function(){if(\"undefined\"==typeof document)return;const e=document.createElement(\"iframe\");return e.style.display=\"none\",document.body.appendChild(e),e.contentWindow.eval(R)}(),n=function(){if(new Function(\"try {return this===global}catch(e){return false}\")())return require(\"vm\").runInNewContext(_)}();if(!e&&!n||e&&n)throw new Error(\"unexpected platform, unable to create Realm\");return e||n};function k(e,t=[]){const r=function(e){const t={};function r(r,o,a,i){for(const s of r){const r=l(e,s);r&&(n(\"value\"in r,`unexpected accessor on global property: ${s}`),t[s]={value:r.value,writable:o,enumerable:a,configurable:i})}}return r(I,!1,!1,!1),r(O,!1,!1,!1),r(P,!0,!1,!0),t}(e);return s({unsafeGlobal:e,sharedGlobalDescs:r,unsafeEval:e.eval,unsafeFunction:e.Function,allShims:t})}const F=t(`\"use strict\"; (${A})();`),C=t(`\"use strict\"; (${T})();`);const $=/^[a-zA-Z_$][\\w$]*$/,N=new Set([\"await\",\"break\",\"case\",\"catch\",\"class\",\"const\",\"continue\",\"debugger\",\"default\",\"delete\",\"do\",\"else\",\"export\",\"extends\",\"finally\",\"for\",\"function\",\"if\",\"import\",\"in\",\"instanceof\",\"new\",\"return\",\"super\",\"switch\",\"this\",\"throw\",\"try\",\"typeof\",\"var\",\"void\",\"while\",\"with\",\"yield\",\"let\",\"static\",\"enum\",\"implements\",\"package\",\"protected\",\"interface\",\"private\",\"public\",\"await\",\"null\",\"true\",\"false\",\"this\",\"arguments\"]);const D=new Proxy(s({}),{get(n,t){e(`unexpected scope handler trap called: ${t}`)}});const M=new RegExp(\"(?:\\x3c!--|--\\x3e)\");const U=/\\bimport\\s*(?:\\(|\\/[\\/*])/;const G=/\\beval\\s*(?:\\(|\\/[\\/*])/;function L(e){!function(e){const n=e.search(M);if(-1!==n){const t=e.slice(0,n).split(\"\\n\").length;throw new SyntaxError(`possible html comment syntax rejected around line ${t}`)}}(e),function(e){const n=e.search(U);if(-1!==n){const t=e.slice(0,n).split(\"\\n\").length;throw new SyntaxError(`possible import expression rejected around line ${t}`)}}(e),function(e){const n=e.search(G);if(-1!==n){const t=e.slice(0,n).split(\"\\n\").length;throw new SyntaxError(`possible direct eval expression rejected around line ${t}`)}}(e)}const W={rewrite:e=>(L(e.src),e)};function H(e,n){const{unsafeFunction:t}=e;return t(`\\n    with (arguments[0]) {\\n      ${function(e){return 0===e.length?\"\":`const {${E(e,\",\")}} = this;`}(n)}\\n      return function() {\\n        'use strict';\\n        return eval(arguments[0]);\\n      };\\n    }\\n  `)}function z(t,r,o,a){const{unsafeFunction:s}=t,l=function(e,n,t){const{unsafeGlobal:r,unsafeEval:o}=e;let a=!1;return{__proto__:D,allowUnsafeEvaluatorOnce(){a=!0},unsafeEvaluatorAllowed:()=>a,get:(e,n)=>\"eval\"===n?!0===a?(a=!1,o):e.eval:n!==Symbol.unscopables&&n in e?e[n]:void 0,set(e,t,r){if(g(e,t))throw new TypeError(`do not modify endowments like ${String(t)}`);return n[t]=r,!0},has:(e,n)=>!!t||(\"eval\"===n||n in e||n in r)}}(t,r,a),y=H(t,function(e){const n=p(e);return b(u(n),e=>{if(\"eval\"===e||N.has(e)||!v($,e))return!1;const t=n[e];return!1===t.configurable&&!1===t.writable&&g(t,\"value\")})}(r));return function(t={},a={}){const u=[...a.transforms||[],...o||[],...[W]],m={eval(n){n=`${n}`;const o=u.reduce((e,n)=>n.rewrite?n.rewrite(e):e,{src:n,endowments:t});n=o.src;const a=i(r,p(o.endowments)),s=new Proxy(a,l),c=f(y,r,[s]);let h;l.allowUnsafeEvaluatorOnce();try{return f(c,r,[n])}catch(e){throw h=e,e}finally{l.unsafeEvaluatorAllowed()&&e(\"handler did not revoke useUnsafeEvaluator\",h)}}}.eval;return d(m,s.prototype),n(h(m).constructor!==Function,\"hide Function\"),n(h(m).constructor!==s,\"hide unsafeFunction\"),c(m,{toString:{value:m(\"() => 'function eval' + '() { [shim code] }'\"),writable:!1,enumerable:!1,configurable:!0}}),m}}const q=new WeakMap;function B(e){return n(Object(e)===e,\"bad object, not a Realm instance\"),n(q.has(e),\"Realm instance has no record\"),q.get(e)}function Y(e,t){n(Object(e)===e,\"bad object, not a Realm instance\"),n(!q.has(e),\"Realm instance already has a record\"),q.set(e,t)}function J(e,t,r){const{sharedGlobalDescs:o,unsafeGlobal:a}=e,l=i(a.Object.prototype,o),p=z(e,l,t,r),u=function(e){return e()}(p),f=function(e){return(n,t,r={})=>e(t,r)(n)}(p),y=function(e,t){const{unsafeFunction:r,unsafeGlobal:o}=e,a=function(...e){const n=`${w(e)||\"\"}`;let a=`${E(e,\",\")}`;if(!v(/^[\\w\\s,]*$/,a))throw new o.SyntaxError(\"shim limitation: Function arg must be simple ASCII identifiers, possibly separated by commas: no default values, pattern matches, or non-ASCII parameter names\");if(new r(n),j(a,\")\"))throw new o.SyntaxError(\"shim limitation: Function arg string contains parenthesis\");return a.length>0&&(a+=\"\\n/*``*/\"),t(`(function(${a}){\\n${n}\\n})`)};return d(a,r.prototype),n(h(a).constructor!==Function,\"hide Function\"),n(h(a).constructor!==r,\"hide unsafeFunction\"),c(a,{prototype:{value:r.prototype},toString:{value:t(\"() => 'function Function() { [shim code] }'\"),writable:!1,enumerable:!1,configurable:!0}}),a}(e,u);return function(e,n,t){c(e,{eval:{value:n,writable:!0,configurable:!0},Function:{value:t,writable:!0,configurable:!0}})}(l,u,y),s({safeGlobal:l,safeEval:u,safeEvalWhichTakesEndowments:f,safeFunction:y})}const V={initRootRealm:function(e,n,t){const{shims:r,transforms:a,sloppyGlobals:i}=t,s=S(e.allShims,r),c=function(e){const n=x();return n.eval(F),n.eval(C),k(n,e)}(s),l=function(e,n){const{unsafeEval:t}=e;return t(o)(e,n)}(c,V);c.sharedGlobalDescs.Realm={value:l,writable:!0,configurable:!0};const p=J(c,a,i),{safeEvalWhichTakesEndowments:u}=p;for(const e of s)u(e);Y(n,p)},initCompartment:function(e,n,t={}){const{transforms:r,sloppyGlobals:o}=t;Y(n,J(e,r,o))},getRealmGlobal:function(e){const{safeGlobal:n}=B(e);return n},realmEvaluate:function(e,n,t={},r={}){const{safeEvalWhichTakesEndowments:o}=B(e);return o(n,t,r)}},K=r(function(){const e=(0,eval)(R);return A(),T(),k(e)}(),V);function Q(e,n={}){const{freeze:t,getOwnPropertyDescriptors:r,getPrototypeOf:o}=Object,{ownKeys:a}=Reflect;let{fringeSet:i}=n;if(i){if(\"function\"!=typeof i.add||\"function\"!=typeof i.has)throw new TypeError(\"options.fringeSet must have add() and has() methods\");if(e)for(const n of e)i.add(n)}else i=new WeakSet(e);const s=n&&n.naivePrepareObject;return function(e){const n=new Set,c=new Map,l=new WeakMap;function p(e,t){if(Object(e)!==e)return;const r=typeof e;if(\"object\"!==r&&\"function\"!==r)throw new TypeError(`Unexpected typeof: ${r}`);i.has(e)||n.has(e)||(n.add(e),l.set(e,t))}function u(e){s&&s(e),t(e);const n=o(e),i=r(e),u=l.get(e)||\"unknown\";null===n||c.has(n)||(c.set(n,u),l.set(n,`${u}.__proto__`)),a(i).forEach(e=>{const n=`${u}.${String(e)}`,t=i[e];\"value\"in t?p(t.value,`${n}`):(p(t.get,`${n}(get)`),p(t.set,`${n}(set)`))})}return p(e),n.forEach(u),c.forEach((e,t)=>{if(!n.has(t)&&!i.has(t)){let n;try{n=`prototype ${t} of ${e} is not already in the fringeSet`}catch(r){n=\"a prototype of something is not already in the fringeset (and .toString failed)\";try{console.log(n),console.log(\"the prototype:\",t),console.log(\"of something:\",e)}catch(e){}}throw new TypeError(n)}}),n.forEach(i.add,i),e}}function X(){const e=Date,n=function(...n){return void 0===new.target?\"Invalid Date\":n.length>0?Reflect.construct(e,n,new.target):Reflect.construct(e,[NaN],new.target)};Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)),e.prototype.constructor=n,n.now=()=>NaN,Date=n}function Z(){Math.random=()=>{throw Error(\"disabled\")}}function ee(){\"undefined\"!=typeof Intl&&(Intl.DateTimeFormat=()=>{throw Error(\"disabled\")},Intl.NumberFormat=()=>{throw Error(\"disabled\")},Intl.getCanonicalLocales=()=>{throw Error(\"disabled\")}),Object.prototype.toLocaleString=()=>{throw new Error(\"toLocaleString suppressed\")}}function ne(){if(!Object.isExtensible(Error))throw Error(\"huh Error is not extensible\");if(delete Error.captureStackTrace,\"captureStackTrace\"in Error)throw Error(\"hey we could not remove Error.captureStackTrace\")}function te(){if(delete RegExp.prototype.compile,\"compile\"in RegExp.prototype)throw Error(\"hey we could not remove RegExp.prototype.compile\");const e=RegExp;if(RegExp=function(...n){return Reflect.construct(e,n,new.target)},RegExp.prototype=e.prototype,e.prototype.constructor=RegExp,\"$1\"in RegExp)throw Error(\"hey we could not remove RegExp.$1\")}function re(e,n){const{getOwnPropertyDescriptor:t,getOwnPropertyNames:r,keys:o}=Object,a=new WeakMap,i=Object.getPrototypeOf,s=(e=>(n,...t)=>Reflect.apply(e,n,t))(Object.prototype.hasOwnProperty),c=new WeakMap;function l(e,n){const r=[!0,!1,\"*\",\"maybeAccessor\"];!function e(n,a){if(n===Object(n))if(\"object\"==typeof a){if(c.has(n))throw new Error(\"primordial reachable through multiple paths\");c.set(n,a),o(a).forEach(r=>{const o=t(n,r);o&&e(o.value,a[r])})}else if(r.indexOf(a)<0)throw new Error(`syntax error in whitelist; unexpected value: ${a}`)}(e,n)}l(e,n.namedIntrinsics),l(getAnonIntrinsics(e),n.anonIntrinsics),function e(n,o,l){if(n!==Object(n))return;if(a.get(n))return;const p=i(n);if(null!==p&&!c.has(p))throw new Error(`unexpected intrinsic ${o}.__proto__`);a.set(n,!0),r(n).forEach(r=>{const a=o+(o?\".\":\"\")+r,l=function(e,n){let t=c.get(e);if(t){if(s(t,n))return t[n];if(s(t,`ESCAPE${n}`))return t[`ESCAPE${n}`]}for(;;){if(null===(e=i(e)))return!1;if((t=c.get(e))&&s(t,n)){const e=t[n];return\"*\"===e&&e}}}(n,r);if(l){const o=t(n,r);if(s(o,\"value\")){e(o.value,a)}else\"maybeAccessor\"!==l?delete n[r]:(e(o.get,`${a}<getter>`),e(o.set,`${a}<setter>`))}else delete n[r]})}(e,\"\")}function oe(e){const n=Object.getOwnPropertyDescriptor,t=Object.getPrototypeOf;function*r(){}const o=t(r);async function*a(){}const i=t(a);async function s(){}const c=t(s);function l(n,r,o){const a=e.Symbol&&e.Symbol.iterator||\"@@iterator\";if(r[a]){const e=r[a](),i=t(e);n[o]=i;const s=t(i);if(s!==Object.prototype)if(n.IteratorPrototype){if(n.IteratorPrototype!==s)throw new Error(`unexpected %${o}%.__proto__`)}else{if(t(s)!==Object.prototype)throw new Error(\"%IteratorPrototype%.__proto__ was not Object.prototype\");n.IteratorPrototype=s}}}return[[\"Object.prototype\",Object.prototype,{}],[\"Function.prototype\",Function.prototype,function(){}],[\"Array.prototype\",Array.prototype,[]],[\"RegExp.prototype\",RegExp.prototype,/x/],[\"Boolean.prototype\",Boolean.prototype,!0],[\"Number.prototype\",Number.prototype,1],[\"String.prototype\",String.prototype,\"x\"],[\"%Generator%\",o,r],[\"%AsyncGenerator%\",i,a],[\"%AsyncFunction%\",c,s]].forEach(e=>{e[0];const n=e[1];let r=e[2];if(void 0!==r&&n!==(r=Object(r))&&n!==t(r))throw new Error(`Unexpected undeniable: ${n}`)}),function(){const r={};if(r.ThrowTypeError=n(arguments,\"callee\").get,l(r,[],\"ArrayIteratorPrototype\"),l(r,\"\",\"StringIteratorPrototype\"),\"function\"==typeof Map&&l(r,new Map,\"MapIteratorPrototype\"),\"function\"==typeof Set&&l(r,new Set,\"SetIteratorPrototype\"),t(o)!==Function.prototype)throw new Error(\"Generator.__proto__ was not Function.prototype\");const a=o.constructor;if(t(a)!==Function.prototype.constructor)throw new Error(\"GeneratorFunction.__proto__ was not Function.prototype.constructor\");if(r.GeneratorFunction=a,t(o.prototype)!==r.IteratorPrototype)throw new Error(\"Unexpected Generator.prototype.__proto__\");if(t(i)!==Function.prototype)throw new Error(\"AsyncGenerator.__proto__ was not Function.prototype\");const s=i.constructor;if(t(s)!==Function.prototype.constructor)throw new Error(\"AsyncGeneratorFunction.__proto__ was not Function.prototype.constructor\");r.AsyncGeneratorFunction=s;const p=i.prototype;if(r.AsyncIteratorPrototype=t(p),t(r.AsyncIteratorPrototype)!==Object.prototype)throw new Error(\"AsyncIteratorPrototype.__proto__ was not Object.prototype\");if(t(c)!==Function.prototype)throw new Error(\"AsyncFunctionPrototype.__proto__ was not Function.prototype\");const u=c.constructor;if(t(u)!==Function.prototype.constructor)throw new Error(\"AsyncFunction.__proto__ was not Function.prototype.constructor\");return r.AsyncFunction=u,function(){if(!e.Float32Array)return;const n=t(e.Float32Array);if(n!==Function.prototype){if(t(n)!==Function.prototype)throw new Error(\"TypedArray.__proto__ was not Function.prototype\");r.TypedArray=n}}(),Object.keys(r).forEach(e=>{if(void 0===r[e])throw new Error(`Malformed intrinsic: ${e}`)}),r}()}function ae(e,n){const{defineProperty:t,getOwnPropertyDescriptor:r,ownKeys:o}=Reflect,a={},i=o(n.namedIntrinsics);for(const n of i){const o=r(e,n);if(o){if(\"get\"in o||\"set\"in o)throw new TypeError(`unexpected accessor on global property: ${n}`);t(a,n,o)}}return a}function ie(e,n){return{global:e,anonIntrinsics:n}}function se(e,n){return{namedIntrinsics:e,anonIntrinsics:n}}const ce=!0,le=!0;let pe;var ue={anonIntrinsics:{ThrowTypeError:{},IteratorPrototype:{next:\"*\",constructor:!1},ArrayIteratorPrototype:{},StringIteratorPrototype:{},MapIteratorPrototype:{},SetIteratorPrototype:{},AsyncIteratorPrototype:{},GeneratorFunction:{length:\"*\",prototype:{prototype:{next:\"*\",return:\"*\",throw:\"*\",constructor:\"*\"}}},AsyncGeneratorFunction:{length:\"*\",prototype:{prototype:{next:\"*\",return:\"*\",throw:\"*\",constructor:\"*\"}}},AsyncFunction:{length:\"*\",prototype:\"*\"},TypedArray:pe={length:\"*\",name:\"*\",from:ce,of:ce,BYTES_PER_ELEMENT:\"*\",prototype:{buffer:\"maybeAccessor\",byteLength:\"maybeAccessor\",byteOffset:\"maybeAccessor\",copyWithin:\"*\",entries:\"*\",every:\"*\",fill:\"*\",filter:\"*\",find:\"*\",findIndex:\"*\",forEach:\"*\",includes:\"*\",indexOf:\"*\",join:\"*\",keys:\"*\",lastIndexOf:\"*\",length:\"maybeAccessor\",map:\"*\",reduce:\"*\",reduceRight:\"*\",reverse:\"*\",set:\"*\",slice:\"*\",some:\"*\",sort:\"*\",subarray:\"*\",values:\"*\",BYTES_PER_ELEMENT:\"*\"}}},namedIntrinsics:{Infinity:le,NaN:le,undefined:le,eval:le,isFinite:ce,isNaN:ce,parseFloat:ce,parseInt:ce,decodeURI:ce,decodeURIComponent:ce,encodeURI:ce,encodeURIComponent:ce,Object:{assign:ce,create:ce,defineProperties:ce,defineProperty:ce,entries:ce,freeze:le,getOwnPropertyDescriptor:ce,getOwnPropertyDescriptors:ce,getOwnPropertyNames:ce,getOwnPropertySymbols:ce,getPrototypeOf:ce,is:le,isExtensible:ce,isFrozen:ce,isSealed:ce,keys:ce,preventExtensions:le,seal:le,setPrototypeOf:ce,values:ce,prototype:{ESCAPE__proto__:\"maybeAccessor\",__defineGetter__:ce,__defineSetter__:ce,__lookupGetter__:ce,__lookupSetter__:ce,constructor:\"*\",hasOwnProperty:ce,isPrototypeOf:ce,propertyIsEnumerable:ce,toLocaleString:\"*\",toString:\"*\",valueOf:\"*\",[Symbol.iterator]:\"*\",[Symbol.toPrimitive]:\"*\",[Symbol.toStringTag]:\"*\",[Symbol.unscopables]:\"*\"}},Function:{length:ce,prototype:{apply:ce,bind:ce,call:ce,[Symbol.hasInstance]:\"*\",length:\"*\",name:\"*\",prototype:\"*\",arity:\"*\",[Symbol.species]:\"maybeAccessor\"}},Boolean:{prototype:ce},Symbol:{asyncIterator:ce,for:ce,hasInstance:ce,isConcatSpreadable:ce,iterator:ce,keyFor:ce,match:ce,matchAll:ce,replace:ce,search:ce,species:ce,split:ce,toPrimitive:ce,toStringTag:ce,unscopables:ce,prototype:ce},Error:{prototype:{name:\"*\",message:\"*\"}},EvalError:{prototype:ce},RangeError:{prototype:ce},ReferenceError:{prototype:ce},SyntaxError:{prototype:ce},TypeError:{prototype:ce},URIError:{prototype:ce},Number:{EPSILON:ce,isFinite:le,isInteger:ce,isNaN:le,isSafeInteger:le,MAX_SAFE_INTEGER:le,MAX_VALUE:ce,MIN_SAFE_INTEGER:le,MIN_VALUE:ce,NaN:ce,NEGATIVE_INFINITY:ce,parseFloat:ce,parseInt:ce,POSITIVE_INFINITY:ce,prototype:{toExponential:ce,toFixed:ce,toPrecision:ce}},Math:{E:le,LN10:le,LN2:le,LOG10E:ce,LOG2E:ce,PI:le,SQRT1_2:ce,SQRT2:ce,abs:le,acos:ce,acosh:ce,asin:ce,asinh:ce,atan:ce,atanh:ce,atan2:ce,cbrt:ce,ceil:le,clz32:ce,cos:ce,cosh:ce,exp:ce,expm1:ce,floor:le,fround:ce,hypot:ce,imul:ce,log:le,log1p:ce,log10:le,log2:le,max:le,min:le,pow:le,random:ce,round:le,sign:ce,sin:ce,sinh:ce,sqrt:le,tan:ce,tanh:ce,trunc:le},Date:{now:ce,parse:ce,UTC:ce,prototype:{getDate:ce,getDay:ce,getFullYear:ce,getHours:ce,getMilliseconds:ce,getMinutes:ce,getMonth:ce,getSeconds:ce,getTime:ce,getTimezoneOffset:ce,getUTCDate:ce,getUTCDay:ce,getUTCFullYear:ce,getUTCHours:ce,getUTCMilliseconds:ce,getUTCMinutes:ce,getUTCMonth:ce,getUTCSeconds:ce,setDate:ce,setFullYear:ce,setHours:ce,setMilliseconds:ce,setMinutes:ce,setMonth:ce,setSeconds:ce,setTime:ce,setUTCDate:ce,setUTCFullYear:ce,setUTCHours:ce,setUTCMilliseconds:ce,setUTCMinutes:ce,setUTCMonth:ce,setUTCSeconds:ce,toDateString:ce,toISOString:ce,toJSON:ce,toLocaleDateString:ce,toLocaleString:ce,toLocaleTimeString:ce,toTimeString:ce,toUTCString:ce,getYear:ce,setYear:ce,toGMTString:ce}},String:{fromCharCode:le,fromCodePoint:ce,raw:le,prototype:{charAt:ce,charCodeAt:ce,codePointAt:ce,concat:ce,endsWith:le,includes:ce,indexOf:le,lastIndexOf:le,localeCompare:ce,match:ce,normalize:ce,padEnd:ce,padStart:ce,repeat:ce,replace:ce,search:ce,slice:le,split:ce,startsWith:le,substring:ce,toLocaleLowerCase:ce,toLocaleUpperCase:ce,toLowerCase:ce,toUpperCase:ce,trim:ce,substr:ce,anchor:ce,big:ce,blink:ce,bold:ce,fixed:ce,fontcolor:ce,fontsize:ce,italics:ce,link:ce,small:ce,strike:ce,sub:ce,sup:ce,trimLeft:ce,trimRight:ce,length:\"*\"}},RegExp:{prototype:{exec:ce,flags:\"maybeAccessor\",global:\"maybeAccessor\",ignoreCase:\"maybeAccessor\",[Symbol.match]:\"*\",multiline:\"maybeAccessor\",[Symbol.replace]:\"*\",[Symbol.search]:\"*\",source:\"maybeAccessor\",[Symbol.split]:\"*\",sticky:\"maybeAccessor\",test:ce,unicode:\"maybeAccessor\",dotAll:\"maybeAccessor\",compile:!1,lastIndex:\"*\",options:\"*\"}},Array:{from:le,isArray:ce,of:le,prototype:{concat:ce,copyWithin:ce,entries:ce,every:ce,fill:ce,filter:le,find:ce,findIndex:ce,forEach:le,includes:ce,indexOf:le,join:ce,keys:ce,lastIndexOf:le,map:le,pop:le,push:le,reduce:le,reduceRight:le,reverse:ce,shift:le,slice:le,some:ce,sort:ce,splice:ce,unshift:le,values:ce,length:\"*\"}},Int8Array:pe,Uint8Array:pe,Uint8ClampedArray:pe,Int16Array:pe,Uint16Array:pe,Int32Array:pe,Uint32Array:pe,Float32Array:pe,Float64Array:pe,Map:{prototype:{clear:le,delete:le,entries:le,forEach:le,get:le,has:le,keys:le,set:le,size:\"maybeAccessor\",values:le}},Set:{prototype:{add:le,clear:le,delete:le,entries:le,forEach:le,has:le,keys:le,size:\"maybeAccessor\",values:le}},WeakMap:{prototype:{delete:le,get:le,has:le,set:le}},WeakSet:{prototype:{add:le,delete:le,has:le}},ArrayBuffer:{isView:ce,length:ce,name:ce,prototype:{byteLength:\"maybeAccessor\",slice:ce}},DataView:{length:ce,name:ce,BYTES_PER_ELEMENT:\"*\",prototype:{buffer:\"maybeAccessor\",byteOffset:\"maybeAccessor\",byteLength:\"maybeAccessor\",getFloat32:ce,getFloat64:ce,getInt8:ce,getInt16:ce,getInt32:ce,getUint8:ce,getUint16:ce,getUint32:ce,setFloat32:ce,setFloat64:ce,setInt8:ce,setInt16:ce,setInt32:ce,setUint8:ce,setUint16:ce,setUint32:ce}},JSON:{parse:le,stringify:le},Promise:{all:le,race:le,reject:le,resolve:le,makeHandled:ce,prototype:{catch:ce,then:le,finally:ce,delete:ce,get:ce,put:ce,post:ce,invoke:ce,fapply:ce,fcall:ce,del:ce,send:ce,end:ce}},Q:{all:ce,race:ce,reject:ce,resolve:ce,join:ce,isPassByCopy:ce,passByCopy:ce,makeRemote:ce,makeFar:ce,shorten:ce,isPromise:ce,async:ce,rejected:ce,promise:ce,delay:ce,memoize:ce,defer:ce},Reflect:{apply:ce,construct:ce,defineProperty:ce,deleteProperty:ce,get:ce,getOwnPropertyDescriptor:ce,getPrototypeOf:ce,has:ce,isExtensible:ce,ownKeys:ce,preventExtensions:ce,set:ce,setPrototypeOf:ce},Proxy:{revocable:ce},escape:ce,unescape:ce,StringMap:{prototype:{}},Realm:{makeRootRealm:ce,makeCompartment:ce,prototype:{global:\"maybeAccessor\",evaluate:ce}},SES:{confine:ce,confineExpr:ce},Nat:le,def:le}};function he(e){const n=new Map([[\"EvalError\",EvalError],[\"RangeError\",RangeError],[\"ReferenceError\",ReferenceError],[\"SyntaxError\",SyntaxError],[\"TypeError\",TypeError],[\"URIError\",URIError]]);const t={};return[\"log\",\"info\",\"warn\",\"error\",\"group\",\"groupEnd\",\"trace\",\"time\",\"timeLog\",\"timeEnd\"].forEach(r=>{if(r in e){const o=e[r];t[r]=function(...e){!function(e,...t){try{e(...t)}catch(e){if(Object(e)!==e)throw e;let t,r,o;try{t=`${e.name}`,r=`${e.message}`,o=`${e.stack||r}`}catch(e){throw new Error(\"unknown error\")}const a=n.get(t)||Error;try{throw new a(r)}catch(e){throw e.stack=o,e}}}(o,...e)}}}),t}function de(e,n){return function(t){const r=new Map;return function(o){const a=`${o}`;return r.has(a)||r.set(a,n(function(r){if(!Object.prototype.hasOwnProperty.call(t,r))throw new Error(`Cannot find module '${r}'`);const o=t[r];if(\"@agoric/harden\"===r)return n;if(\"function\"==typeof o)return e.evaluate(`(${o})`);const a=`(${o.attenuatorSource})`;return e.evaluate(a)(o)}(a))),r.get(a)}}}var fe={namedIntrinsics:{Object:{prototype:\"*\"},Array:{prototype:\"*\"},Function:{prototype:{constructor:!0,bind:!0,name:!0,toString:!0,call:!0}},Error:{prototype:{constructor:!0,message:!0,name:!0}},Promise:{prototype:{constructor:!0}}},anonIntrinsics:{TypedArray:{prototype:\"*\"},GeneratorFunction:{prototype:{constructor:!0,name:!0,toString:!0}},AsyncFunction:{prototype:{constructor:!0,name:!0,toString:!0}},AsyncGeneratorFunction:{prototype:{constructor:!0,name:!0,toString:!0}},IteratorPrototype:\"*\",ArrayIteratorPrototype:\"*\"}};function ye(e,n){const{defineProperties:t,getOwnPropertyDescriptor:r,getOwnPropertyDescriptors:o,prototype:{hasOwnProperty:a}}=Object,{ownKeys:i}=Reflect;function s(e,n,r){if(\"value\"in r&&r.configurable){const{value:i}=r;function o(){return i}o.value=i,t(e,{[n]:{get:o,set:function(o){if(e===this)throw new TypeError(`Cannot assign to read only property '${n}' of object '${e}'`);a.call(this,n)?this[n]=o:t(this,{[n]:{value:o,writable:!0,enumerable:r.enumerable,configurable:r.configurable}})},enumerable:r.enumerable,configurable:r.configurable}})}}!function e(n,t){n&&t&&i(t).forEach(a=>{const c=t[a],l=n[a];switch(c){case!0:!function(e,n){if(!e)return;const t=r(e,n);t&&s(e,n,t)}(n,a);break;case\"*\":!function(e){if(!e)return;const n=o(e);n&&i(n).forEach(t=>s(e,t,n[t]))}(l);break;default:if(Object(c)!==c)throw TypeError(`Repair plan subPlan ${c} is invalid`);e(l,c)}})}(e,n)}const me=[\"transforms\"];return function(e,n){return{makeSESRootRealm:function(t){t=Object(t);const r=[],{dataPropertiesToRepair:o,shims:a,sloppyGlobals:i,whitelist:s,...c}=t,l=JSON.parse(JSON.stringify(s||ue)),p=void 0!==o?JSON.parse(JSON.stringify(o)):fe,u={};if(me.forEach(e=>{e in c&&(u[e]=c[e])}),i)throw TypeError(\"sloppyGlobals cannot be specified for makeSESRootRealm!\\nYou probably want a Compartment instead, like:\\n  const c = s.global.Realm.makeCompartment({ sloppyGlobals: true })\");\"allow\"!==t.dateNowMode&&r.push(`(${X})();`),\"allow\"!==t.mathRandomMode&&r.push(`(${Z})();`),\"allow\"!==t.intlMode&&r.push(`(${ee})();`),\"allow\"!==t.errorStackMode?r.push(`(${ne})();`):(l.namedIntrinsics.Error.captureStackTrace=!0,l.namedIntrinsics.Error.stackTraceLimit=!0,l.namedIntrinsics.Error.prepareStackTrace=!0),\"allow\"!==t.regexpMode&&r.push(`(${te})();`);const h=`const getAnonIntrinsics = (${oe});\\n               (${re})(this, ${JSON.stringify(l)})`;r.push(h),a&&r.push(...a);const d=n.makeRootRealm({...u,shims:r}),f=`(${Q})`,y=d.evaluate(f)();if(d.evaluate(e).createSESInThisRealm(d.global,e,d),\"allow\"===t.consoleMode){const e=`(${he})`;d.global.console=d.evaluate(e)(console)}const m=d.evaluate(`(${oe})`)(d.global),g=d.evaluate(`(${ae})`)(d.global,ue),b=d.evaluate(`(${se})`)(g,m),w=d.evaluate(`(${ie})`)(d.global,m);return d.evaluate(`(${ye})`)(b,p),y(w),d.makeRequire=y(d.evaluate(`(${de})`)(d,y)),d}}}(\"(function (exports) {\\n  'use strict';\\n\\n  // Adapted from SES/Caja - Copyright (C) 2011 Google Inc.\\n  // Copyright (C) 2018 Agoric\\n\\n  // Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  // you may not use this file except in compliance with the License.\\n  // You may obtain a copy of the License at\\n  //\\n  // http://www.apache.org/licenses/LICENSE-2.0\\n  //\\n  // Unless required by applicable law or agreed to in writing, software\\n  // distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  // See the License for the specific language governing permissions and\\n  // limitations under the License.\\n\\n  // based upon:\\n  // https://github.com/google/caja/blob/master/src/com/google/caja/ses/startSES.js\\n  // https://github.com/google/caja/blob/master/src/com/google/caja/ses/repairES5.js\\n  // then copied from proposal-frozen-realms deep-freeze.js\\n  // then copied from SES/src/bundle/deepFreeze.js\\n\\n  /**\\n   * @typedef HardenerOptions\\n   * @type {object}\\n   * @property {WeakSet=} fringeSet WeakSet to use for the fringeSet\\n   * @property {Function=} naivePrepareObject Call with object before hardening\\n   */\\n\\n  /**\\n   * Create a `harden` function.\\n   *\\n   * @param {Iterable} initialFringe Objects considered already hardened\\n   * @param {HardenerOptions=} options Options for creation\\n   */\\n  function makeHardener(initialFringe, options = {}) {\\n    const { freeze, getOwnPropertyDescriptors, getPrototypeOf } = Object;\\n    const { ownKeys } = Reflect;\\n\\n    // Objects that we won't freeze, either because we've frozen them already,\\n    // or they were one of the initial roots (terminals). These objects form\\n    // the \\\"fringe\\\" of the hardened object graph.\\n    let { fringeSet } = options;\\n    if (fringeSet) {\\n      if (\\n        typeof fringeSet.add !== 'function' ||\\n        typeof fringeSet.has !== 'function'\\n      ) {\\n        throw new TypeError(\\n          `options.fringeSet must have add() and has() methods`,\\n        );\\n      }\\n\\n      // Populate the supplied fringeSet with our initialFringe.\\n      if (initialFringe) {\\n        for (const fringe of initialFringe) {\\n          fringeSet.add(fringe);\\n        }\\n      }\\n    } else {\\n      // Use a new empty fringe.\\n      fringeSet = new WeakSet(initialFringe);\\n    }\\n\\n    const naivePrepareObject = options && options.naivePrepareObject;\\n\\n    function harden(root) {\\n      const toFreeze = new Set();\\n      const prototypes = new Map();\\n      const paths = new WeakMap();\\n\\n      // If val is something we should be freezing but aren't yet,\\n      // add it to toFreeze.\\n      function enqueue(val, path) {\\n        if (Object(val) !== val) {\\n          // ignore primitives\\n          return;\\n        }\\n        const type = typeof val;\\n        if (type !== 'object' && type !== 'function') {\\n          // future proof: break until someone figures out what it should do\\n          throw new TypeError(`Unexpected typeof: ${type}`);\\n        }\\n        if (fringeSet.has(val) || toFreeze.has(val)) {\\n          // Ignore if this is an exit, or we've already visited it\\n          return;\\n        }\\n        // console.log(`adding ${val} to toFreeze`, val);\\n        toFreeze.add(val);\\n        paths.set(val, path);\\n      }\\n\\n      function freezeAndTraverse(obj) {\\n        // Apply the naive preparer if they specified one.\\n        if (naivePrepareObject) {\\n          naivePrepareObject(obj);\\n        }\\n\\n        // Now freeze the object to ensure reactive\\n        // objects such as proxies won't add properties\\n        // during traversal, before they get frozen.\\n\\n        // Object are verified before being enqueued,\\n        // therefore this is a valid candidate.\\n        // Throws if this fails (strict mode).\\n        freeze(obj);\\n\\n        // we rely upon certain commitments of Object.freeze and proxies here\\n\\n        // get stable/immutable outbound links before a Proxy has a chance to do\\n        // something sneaky.\\n        const proto = getPrototypeOf(obj);\\n        const descs = getOwnPropertyDescriptors(obj);\\n        const path = paths.get(obj) || 'unknown';\\n\\n        // console.log(`adding ${proto} to prototypes under ${path}`);\\n        if (proto !== null && !prototypes.has(proto)) {\\n          prototypes.set(proto, path);\\n          paths.set(proto, `${path}.__proto__`);\\n        }\\n\\n        ownKeys(descs).forEach(name => {\\n          const pathname = `${path}.${String(name)}`;\\n          // todo uncurried form\\n          // todo: getOwnPropertyDescriptors is guaranteed to return well-formed\\n          // descriptors, but they still inherit from Object.prototype. If\\n          // someone has poisoned Object.prototype to add 'value' or 'get'\\n          // properties, then a simple 'if (\\\"value\\\" in desc)' or 'desc.value'\\n          // test could be confused. We use hasOwnProperty to be sure about\\n          // whether 'value' is present or not, which tells us for sure that this\\n          // is a data property.\\n          const desc = descs[name];\\n          if ('value' in desc) {\\n            // todo uncurried form\\n            enqueue(desc.value, `${pathname}`);\\n          } else {\\n            enqueue(desc.get, `${pathname}(get)`);\\n            enqueue(desc.set, `${pathname}(set)`);\\n          }\\n        });\\n      }\\n\\n      function dequeue() {\\n        // New values added before forEach() has finished will be visited.\\n        toFreeze.forEach(freezeAndTraverse); // todo curried forEach\\n      }\\n\\n      function checkPrototypes() {\\n        prototypes.forEach((path, p) => {\\n          if (!(toFreeze.has(p) || fringeSet.has(p))) {\\n            // all reachable properties have already been frozen by this point\\n            let msg;\\n            try {\\n              msg = `prototype ${p} of ${path} is not already in the fringeSet`;\\n            } catch (e) {\\n              // `${(async _=>_).__proto__}` fails in most engines\\n              msg =\\n                'a prototype of something is not already in the fringeset (and .toString failed)';\\n              try {\\n                console.log(msg);\\n                console.log('the prototype:', p);\\n                console.log('of something:', path);\\n              } catch (_e) {\\n                // console.log might be missing in restrictive SES realms\\n              }\\n            }\\n            throw new TypeError(msg);\\n          }\\n        });\\n      }\\n\\n      function commit() {\\n        // todo curried forEach\\n        // we capture the real WeakSet.prototype.add above, in case someone\\n        // changes it. The two-argument form of forEach passes the second\\n        // argument as the 'this' binding, so we add to the correct set.\\n        toFreeze.forEach(fringeSet.add, fringeSet);\\n      }\\n\\n      enqueue(root);\\n      dequeue();\\n      // console.log(\\\"fringeSet\\\", fringeSet);\\n      // console.log(\\\"prototype set:\\\", prototypes);\\n      // console.log(\\\"toFreeze set:\\\", toFreeze);\\n      checkPrototypes();\\n      commit();\\n\\n      return root;\\n    }\\n\\n    return harden;\\n  }\\n\\n  function tameDate() {\\n    const unsafeDate = Date;\\n    // Date(anything) gives a string with the current time\\n    // new Date(x) coerces x into a number and then returns a Date\\n    // new Date() returns the current time, as a Date object\\n    // new Date(undefined) returns a Date object which stringifies to 'Invalid Date'\\n\\n    const newDateConstructor = function Date(...args) {\\n      if (new.target === undefined) {\\n        // we were not called as a constructor\\n        // this would normally return a string with the current time\\n        return 'Invalid Date';\\n      }\\n      // constructor behavior: if we get arguments, we can safely pass them through\\n      if (args.length > 0) {\\n        return Reflect.construct(unsafeDate, args, new.target);\\n        // todo: test that our constructor can still be subclassed\\n      }\\n      // no arguments: return a Date object, but invalid\\n      return Reflect.construct(unsafeDate, [NaN], new.target);\\n    };\\n\\n    Object.defineProperties(\\n      newDateConstructor,\\n      Object.getOwnPropertyDescriptors(unsafeDate),\\n    );\\n    // that will copy the .prototype too, so this next line is unnecessary\\n    // newDateConstructor.prototype = unsafeDate.prototype;\\n    unsafeDate.prototype.constructor = newDateConstructor;\\n    // disable Date.now\\n    newDateConstructor.now = () => NaN;\\n\\n    Date = newDateConstructor; // eslint-disable-line no-global-assign\\n  }\\n\\n  function tameMath() {\\n    // Math.random = () => 4; // https://www.xkcd.com/221\\n    Math.random = () => {\\n      throw Error('disabled');\\n    };\\n  }\\n\\n  /* global Intl */\\n\\n  function tameIntl() {\\n    // todo: somehow fix these. These almost certainly don't enable the reading\\n    // of side-channels, but we want things to be deterministic across\\n    // runtimes. Best bet is to just disallow calling these functions without\\n    // an explicit locale name.\\n\\n    // the whitelist may have deleted Intl entirely, so tolerate that\\n    if (typeof Intl !== 'undefined') {\\n      Intl.DateTimeFormat = () => {\\n        throw Error('disabled');\\n      };\\n      Intl.NumberFormat = () => {\\n        throw Error('disabled');\\n      };\\n      Intl.getCanonicalLocales = () => {\\n        throw Error('disabled');\\n      };\\n    }\\n    // eslint-disable-next-line no-extend-native\\n    Object.prototype.toLocaleString = () => {\\n      throw new Error('toLocaleString suppressed');\\n    };\\n  }\\n\\n  function tameError() {\\n    if (!Object.isExtensible(Error)) {\\n      throw Error('huh Error is not extensible');\\n    }\\n    /* this worked back when we were running it on a global, but stopped\\n    working when we turned it into a shim */\\n    /*\\n    Object.defineProperty(Error.prototype, \\\"stack\\\",\\n                          { get() { return 'stack suppressed'; } });\\n    */\\n    delete Error.captureStackTrace;\\n    if ('captureStackTrace' in Error) {\\n      throw Error('hey we could not remove Error.captureStackTrace');\\n    }\\n\\n    // we might do this in the future\\n    /*\\n    const unsafeError = Error;\\n    const newErrorConstructor = function Error(...args) {\\n      return Reflect.construct(unsafeError, args, new.target);\\n    };\\n\\n    newErrorConstructor.prototype = unsafeError.prototype;\\n    newErrorConstructor.prototype.construct = newErrorConstructor;\\n\\n    Error = newErrorConstructor;\\n\\n    EvalError.__proto__ = newErrorConstructor;\\n    RangeError.__proto__ = newErrorConstructor;\\n    ReferenceError.__proto__ = newErrorConstructor;\\n    SyntaxError.__proto__ = newErrorConstructor;\\n    TypeError.__proto__ = newErrorConstructor;\\n    URIError.__proto__ = newErrorConstructor;\\n    */\\n  }\\n\\n  function tameRegExp() {\\n    delete RegExp.prototype.compile;\\n    if ('compile' in RegExp.prototype) {\\n      throw Error('hey we could not remove RegExp.prototype.compile');\\n    }\\n\\n    // We want to delete RegExp.$1, as well as any other surprising properties.\\n    // On some engines we can't just do 'delete RegExp.$1'.\\n    const unsafeRegExp = RegExp;\\n\\n    // eslint-disable-next-line no-global-assign\\n    RegExp = function RegExp(...args) {\\n      return Reflect.construct(unsafeRegExp, args, new.target);\\n    };\\n    RegExp.prototype = unsafeRegExp.prototype;\\n    unsafeRegExp.prototype.constructor = RegExp;\\n\\n    if ('$1' in RegExp) {\\n      throw Error('hey we could not remove RegExp.$1');\\n    }\\n  }\\n\\n  /* global getAnonIntrinsics */\\n\\n  // Copyright (C) 2011 Google Inc.\\n  // Copyright (C) 2018 Agoric\\n  //\\n  // Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  // you may not use this file except in compliance with the License.\\n  // You may obtain a copy of the License at\\n  //\\n  // http://www.apache.org/licenses/LICENSE-2.0\\n  //\\n  // Unless required by applicable law or agreed to in writing, software\\n  // distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  // See the License for the specific language governing permissions and\\n  // limitations under the License.\\n\\n  /* This is evaluated in an environment in which getAnonIntrinsics() is\\n     already defined (by prepending the definition of getAnonIntrinsics to the\\n     stringified removeProperties()), hence we don't use the following\\n     import */\\n  // import { getAnonIntrinsics } from './anonIntrinsics.js';\\n\\n  function removeProperties(global, whitelist) {\\n    // walk global object, test against whitelist, delete\\n\\n    const uncurryThis = fn => (thisArg, ...args) =>\\n      Reflect.apply(fn, thisArg, args);\\n    const {\\n      getOwnPropertyDescriptor: gopd,\\n      getOwnPropertyNames: gopn,\\n      keys,\\n    } = Object;\\n    const cleaning = new WeakMap();\\n    const getProto = Object.getPrototypeOf;\\n    const hop = uncurryThis(Object.prototype.hasOwnProperty);\\n\\n    const whiteTable = new WeakMap();\\n\\n    function addToWhiteTable(rootValue, rootPermit) {\\n      /**\\n       * The whiteTable should map from each path-accessible primordial\\n       * object to the permit object that describes how it should be\\n       * cleaned.\\n       *\\n       * We initialize the whiteTable only so that {@code getPermit} can\\n       * process \\\"*\\\" inheritance using the whitelist, by walking actual\\n       * inheritance chains.\\n       */\\n      const whitelistSymbols = [true, false, '*', 'maybeAccessor'];\\n      function register(value, permit) {\\n        if (value !== Object(value)) {\\n          return;\\n        }\\n        if (typeof permit !== 'object') {\\n          if (whitelistSymbols.indexOf(permit) < 0) {\\n            throw new Error(\\n              `syntax error in whitelist; unexpected value: ${permit}`,\\n            );\\n          }\\n          return;\\n        }\\n        if (whiteTable.has(value)) {\\n          throw new Error('primordial reachable through multiple paths');\\n        }\\n        whiteTable.set(value, permit);\\n        keys(permit).forEach(name => {\\n          // Use gopd to avoid invoking an accessor property.\\n          // Accessor properties for which permit !== 'maybeAccessor'\\n          // are caught later by clean().\\n          const desc = gopd(value, name);\\n          if (desc) {\\n            register(desc.value, permit[name]);\\n          }\\n        });\\n      }\\n      register(rootValue, rootPermit);\\n    }\\n\\n    /**\\n     * Should the property named {@code name} be whitelisted on the\\n     * {@code base} object, and if so, with what Permit?\\n     *\\n     * <p>If it should be permitted, return the Permit (where Permit =\\n     * true | \\\"maybeAccessor\\\" | \\\"*\\\" | Record(Permit)), all of which are\\n     * truthy. If it should not be permitted, return false.\\n     */\\n    function getPermit(base, name) {\\n      let permit = whiteTable.get(base);\\n      if (permit) {\\n        if (hop(permit, name)) {\\n          return permit[name];\\n        }\\n        // Allow escaping of magical names like '__proto__'.\\n        if (hop(permit, `ESCAPE${name}`)) {\\n          return permit[`ESCAPE${name}`];\\n        }\\n      }\\n      // eslint-disable-next-line no-constant-condition\\n      while (true) {\\n        base = getProto(base); // eslint-disable-line no-param-reassign\\n        if (base === null) {\\n          return false;\\n        }\\n        permit = whiteTable.get(base);\\n        if (permit && hop(permit, name)) {\\n          const result = permit[name];\\n          if (result === '*') {\\n            return result;\\n          }\\n          return false;\\n        }\\n      }\\n    }\\n\\n    /**\\n     * Removes all non-whitelisted properties found by recursively and\\n     * reflectively walking own property chains.\\n     *\\n     * <p>Inherited properties are not checked, because we require that\\n     * inherited-from objects are otherwise reachable by this traversal.\\n     */\\n    function clean(value, prefix, num) {\\n      if (value !== Object(value)) {\\n        return;\\n      }\\n      if (cleaning.get(value)) {\\n        return;\\n      }\\n\\n      const proto = getProto(value);\\n      if (proto !== null && !whiteTable.has(proto)) {\\n        // reportItemProblem(rootReports, ses.severities.NOT_ISOLATED,\\n        //                  'unexpected intrinsic', prefix + '.__proto__');\\n        throw new Error(`unexpected intrinsic ${prefix}.__proto__`);\\n      }\\n\\n      cleaning.set(value, true);\\n      gopn(value).forEach(name => {\\n        const path = prefix + (prefix ? '.' : '') + name;\\n        const p = getPermit(value, name);\\n        if (p) {\\n          const desc = gopd(value, name);\\n          if (hop(desc, 'value')) {\\n            // Is a data property\\n            const subValue = desc.value;\\n            clean(subValue, path);\\n          } else if (p !== 'maybeAccessor') {\\n            // We are not saying that it is safe for the prop to be\\n            // unexpectedly an accessor; rather, it will be deleted\\n            // and thus made safe.\\n            // reportProperty(ses.severities.SAFE_SPEC_VIOLATION,\\n            //               'Not a data property', path);\\n            delete value[name]; // eslint-disable-line no-param-reassign\\n          } else {\\n            clean(desc.get, `${path}<getter>`);\\n            clean(desc.set, `${path}<setter>`);\\n          }\\n        } else {\\n          delete value[name]; // eslint-disable-line no-param-reassign\\n        }\\n      });\\n    }\\n\\n    addToWhiteTable(global, whitelist.namedIntrinsics);\\n    const intr = getAnonIntrinsics(global);\\n    addToWhiteTable(intr, whitelist.anonIntrinsics);\\n    clean(global, '');\\n  }\\n\\n  // Copyright (C) 2011 Google Inc.\\n  // Copyright (C) 2018 Agoric\\n  //\\n  // Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  // you may not use this file except in compliance with the License.\\n  // You may obtain a copy of the License at\\n  //\\n  // https://www.apache.org/licenses/LICENSE-2.0\\n  //\\n  // Unless required by applicable law or agreed to in writing, software\\n  // distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  // See the License for the specific language governing permissions and\\n  // limitations under the License.\\n\\n  // TODO(erights): We should test for\\n  // We now have a reason to omit Proxy from the whitelist.\\n  // The makeBrandTester in repairES5 uses Allen's trick at\\n  // https://esdiscuss.org/topic/tostringtag-spoofing-for-null-and-undefined#content-59\\n  // , but testing reveals that, on FF 35.0.1, a proxy on an exotic\\n  // object X will pass this brand test when X will. This is fixed as of\\n  // FF Nightly 38.0a1.\\n\\n  /**\\n   * <p>Qualifying platforms generally include all JavaScript platforms\\n   * shown on <a href=\\\"http://kangax.github.com/es5-compat-table/\\\"\\n   * >ECMAScript 5 compatibility table</a> that implement {@code\\n   * Object.getOwnPropertyNames}. At the time of this writing,\\n   * qualifying browsers already include the latest released versions of\\n   * Internet Explorer (9), Firefox (4), Chrome (11), and Safari\\n   * (5.0.5), their corresponding standalone (e.g., server-side) JavaScript\\n   * engines, Rhino 1.73, and BESEN.\\n   *\\n   * <p>On such not-quite-ES5 platforms, some elements of these\\n   * emulations may lose SES safety, as enumerated in the comment on\\n   * each problem record in the {@code baseProblems} and {@code\\n   * supportedProblems} array below. The platform must at least provide\\n   * {@code Object.getOwnPropertyNames}, because it cannot reasonably be\\n   * emulated.\\n   *\\n   * <p>This file is useful by itself, as it has no dependencies on the\\n   * rest of SES. It creates no new global bindings, but merely repairs\\n   * standard globals or standard elements reachable from standard\\n   * globals. If the future-standard {@code WeakMap} global is present,\\n   * as it is currently on FF7.0a1, then it will repair it in place. The\\n   * one non-standard element that this file uses is {@code console} if\\n   * present, in order to report the repairs it found necessary, in\\n   * which case we use its {@code log, info, warn}, and {@code error}\\n   * methods. If {@code console.log} is absent, then this file performs\\n   * its repairs silently.\\n   *\\n   * <p>Generally, this file should be run as the first script in a\\n   * JavaScript context (i.e. a browser frame), as it relies on other\\n   * primordial objects and methods not yet being perturbed.\\n   *\\n   * <p>TODO(erights): This file tries to protect itself from some\\n   * post-initialization perturbation by stashing some of the\\n   * primordials it needs for later use, but this attempt is currently\\n   * incomplete. We need to revisit this when we support Confined-ES5,\\n   * as a variant of SES in which the primordials are not frozen. See\\n   * previous failed attempt at <a\\n   * href=\\\"https://codereview.appspot.com/5278046/\\\" >Speeds up\\n   * WeakMap. Preparing to support unfrozen primordials.</a>. From\\n   * analysis of this failed attempt, it seems that the only practical\\n   * way to support CES is by use of two frames, where most of initSES\\n   * runs in a SES frame, and so can avoid worrying about most of these\\n   * perturbations.\\n   */\\n  function getAnonIntrinsics$1(global) {\\n\\n    const gopd = Object.getOwnPropertyDescriptor;\\n    const getProto = Object.getPrototypeOf;\\n\\n    // ////////////// Undeniables and Intrinsics //////////////\\n\\n    /**\\n     * The undeniables are the primordial objects which are ambiently\\n     * reachable via compositions of strict syntax, primitive wrapping\\n     * (new Object(x)), and prototype navigation (the equivalent of\\n     * Object.getPrototypeOf(x) or x.__proto__). Although we could in\\n     * theory monkey patch primitive wrapping or prototype navigation,\\n     * we won't. Hence, without parsing, the following are undeniable no\\n     * matter what <i>other</i> monkey patching we do to the primordial\\n     * environment.\\n     */\\n\\n    // The first element of each undeniableTuple is a string used to\\n    // name the undeniable object for reporting purposes. It has no\\n    // other programmatic use.\\n    //\\n    // The second element of each undeniableTuple should be the\\n    // undeniable itself.\\n    //\\n    // The optional third element of the undeniableTuple, if present,\\n    // should be an example of syntax, rather than use of a monkey\\n    // patchable API, evaluating to a value from which the undeniable\\n    // object in the second element can be reached by only the\\n    // following steps:\\n    // If the value is primitve, convert to an Object wrapper.\\n    // Is the resulting object either the undeniable object, or does\\n    // it inherit directly from the undeniable object?\\n\\n    function* aStrictGenerator() {} // eslint-disable-line no-empty-function\\n    const Generator = getProto(aStrictGenerator);\\n    async function* aStrictAsyncGenerator() {} // eslint-disable-line no-empty-function\\n    const AsyncGenerator = getProto(aStrictAsyncGenerator);\\n    async function aStrictAsyncFunction() {} // eslint-disable-line no-empty-function\\n    const AsyncFunctionPrototype = getProto(aStrictAsyncFunction);\\n\\n    // TODO: this is dead code, but could be useful: make this the\\n    // 'undeniables' object available via some API.\\n\\n    const undeniableTuples = [\\n      ['Object.prototype', Object.prototype, {}],\\n      ['Function.prototype', Function.prototype, function foo() {}],\\n      ['Array.prototype', Array.prototype, []],\\n      ['RegExp.prototype', RegExp.prototype, /x/],\\n      ['Boolean.prototype', Boolean.prototype, true],\\n      ['Number.prototype', Number.prototype, 1],\\n      ['String.prototype', String.prototype, 'x'],\\n      ['%Generator%', Generator, aStrictGenerator],\\n      ['%AsyncGenerator%', AsyncGenerator, aStrictAsyncGenerator],\\n      ['%AsyncFunction%', AsyncFunctionPrototype, aStrictAsyncFunction],\\n    ];\\n\\n    undeniableTuples.forEach(tuple => {\\n      const name = tuple[0];\\n      const undeniable = tuple[1];\\n      let start = tuple[2];\\n      if (start === undefined) {\\n        return;\\n      }\\n      start = Object(start);\\n      if (undeniable === start) {\\n        return;\\n      }\\n      if (undeniable === getProto(start)) {\\n        return;\\n      }\\n      throw new Error(`Unexpected undeniable: ${undeniable}`);\\n    });\\n\\n    function registerIteratorProtos(registery, base, name) {\\n      const iteratorSym =\\n        (global.Symbol && global.Symbol.iterator) || '@@iterator'; // used instead of a symbol on FF35\\n\\n      if (base[iteratorSym]) {\\n        const anIter = base[iteratorSym]();\\n        const anIteratorPrototype = getProto(anIter);\\n        registery[name] = anIteratorPrototype; // eslint-disable-line no-param-reassign\\n        const anIterProtoBase = getProto(anIteratorPrototype);\\n        if (anIterProtoBase !== Object.prototype) {\\n          if (!registery.IteratorPrototype) {\\n            if (getProto(anIterProtoBase) !== Object.prototype) {\\n              throw new Error(\\n                '%IteratorPrototype%.__proto__ was not Object.prototype',\\n              );\\n            }\\n            registery.IteratorPrototype = anIterProtoBase; // eslint-disable-line no-param-reassign\\n          } else if (registery.IteratorPrototype !== anIterProtoBase) {\\n            throw new Error(`unexpected %${name}%.__proto__`);\\n          }\\n        }\\n      }\\n    }\\n\\n    /**\\n     * Get the intrinsics not otherwise reachable by named own property\\n     * traversal. See\\n     * https://people.mozilla.org/~jorendorff/es6-draft.html#sec-well-known-intrinsic-objects\\n     * and the instrinsics section of whitelist.js\\n     *\\n     * <p>Unlike getUndeniables(), the result of sampleAnonIntrinsics()\\n     * does depend on the current state of the primordials, so we must\\n     * run this again after all other relevant monkey patching is done,\\n     * in order to properly initialize cajaVM.intrinsics\\n     */\\n\\n    // TODO: we can probably unwrap this into the outer function, and stop\\n    // using a separately named 'sampleAnonIntrinsics'\\n    function sampleAnonIntrinsics() {\\n      const result = {};\\n\\n      // If there are still other ThrowTypeError objects left after\\n      // noFuncPoison-ing, this should be caught by\\n      // test_THROWTYPEERROR_NOT_UNIQUE below, so we assume here that\\n      // this is the only surviving ThrowTypeError intrinsic.\\n      // eslint-disable-next-line prefer-rest-params\\n      result.ThrowTypeError = gopd(arguments, 'callee').get;\\n\\n      // Get the ES6 %ArrayIteratorPrototype%,\\n      // %StringIteratorPrototype%, %MapIteratorPrototype%,\\n      // %SetIteratorPrototype% and %IteratorPrototype% intrinsics, if\\n      // present.\\n      registerIteratorProtos(result, [], 'ArrayIteratorPrototype');\\n      registerIteratorProtos(result, '', 'StringIteratorPrototype');\\n      if (typeof Map === 'function') {\\n        registerIteratorProtos(result, new Map(), 'MapIteratorPrototype');\\n      }\\n      if (typeof Set === 'function') {\\n        registerIteratorProtos(result, new Set(), 'SetIteratorPrototype');\\n      }\\n\\n      // Get the ES6 %GeneratorFunction% intrinsic, if present.\\n      if (getProto(Generator) !== Function.prototype) {\\n        throw new Error('Generator.__proto__ was not Function.prototype');\\n      }\\n      const GeneratorFunction = Generator.constructor;\\n      if (getProto(GeneratorFunction) !== Function.prototype.constructor) {\\n        throw new Error(\\n          'GeneratorFunction.__proto__ was not Function.prototype.constructor',\\n        );\\n      }\\n      result.GeneratorFunction = GeneratorFunction;\\n      const genProtoBase = getProto(Generator.prototype);\\n      if (genProtoBase !== result.IteratorPrototype) {\\n        throw new Error('Unexpected Generator.prototype.__proto__');\\n      }\\n\\n      // Get the ES6 %AsyncGeneratorFunction% intrinsic, if present.\\n      if (getProto(AsyncGenerator) !== Function.prototype) {\\n        throw new Error('AsyncGenerator.__proto__ was not Function.prototype');\\n      }\\n      const AsyncGeneratorFunction = AsyncGenerator.constructor;\\n      if (getProto(AsyncGeneratorFunction) !== Function.prototype.constructor) {\\n        throw new Error(\\n          'AsyncGeneratorFunction.__proto__ was not Function.prototype.constructor',\\n        );\\n      }\\n      result.AsyncGeneratorFunction = AsyncGeneratorFunction;\\n      const AsyncGeneratorPrototype = AsyncGenerator.prototype;\\n      result.AsyncIteratorPrototype = getProto(AsyncGeneratorPrototype);\\n      // it appears that the only way to get an AsyncIteratorPrototype is\\n      // through this getProto() process, so there's nothing to check it\\n      // against\\n      if (getProto(result.AsyncIteratorPrototype) !== Object.prototype) {\\n        throw new Error(\\n          'AsyncIteratorPrototype.__proto__ was not Object.prototype',\\n        );\\n      }\\n\\n      // Get the ES6 %AsyncFunction% intrinsic, if present.\\n      if (getProto(AsyncFunctionPrototype) !== Function.prototype) {\\n        throw new Error(\\n          'AsyncFunctionPrototype.__proto__ was not Function.prototype',\\n        );\\n      }\\n      const AsyncFunction = AsyncFunctionPrototype.constructor;\\n      if (getProto(AsyncFunction) !== Function.prototype.constructor) {\\n        throw new Error(\\n          'AsyncFunction.__proto__ was not Function.prototype.constructor',\\n        );\\n      }\\n      result.AsyncFunction = AsyncFunction;\\n\\n      // Get the ES6 %TypedArray% intrinsic, if present.\\n      (function getTypedArray() {\\n        if (!global.Float32Array) {\\n          return;\\n        }\\n        const TypedArray = getProto(global.Float32Array);\\n        if (TypedArray === Function.prototype) {\\n          return;\\n        }\\n        if (getProto(TypedArray) !== Function.prototype) {\\n          // http://bespin.cz/~ondras/html/classv8_1_1ArrayBufferView.html\\n          // has me worried that someone might make such an intermediate\\n          // object visible.\\n          throw new Error('TypedArray.__proto__ was not Function.prototype');\\n        }\\n        result.TypedArray = TypedArray;\\n      })();\\n\\n      Object.keys(result).forEach(name => {\\n        if (result[name] === undefined) {\\n          throw new Error(`Malformed intrinsic: ${name}`);\\n        }\\n      });\\n\\n      return result;\\n    }\\n\\n    return sampleAnonIntrinsics();\\n  }\\n\\n  function getNamedIntrinsics(unsafeGlobal, whitelist) {\\n    const { defineProperty, getOwnPropertyDescriptor, ownKeys } = Reflect;\\n\\n    const namedIntrinsics = {};\\n\\n    const propertyNames = ownKeys(whitelist.namedIntrinsics);\\n\\n    for (const name of propertyNames) {\\n      const desc = getOwnPropertyDescriptor(unsafeGlobal, name);\\n      if (desc) {\\n        // Abort if an accessor is found on the unsafe global object\\n        // instead of a data property. We should never get into this\\n        // non standard situation.\\n        if ('get' in desc || 'set' in desc) {\\n          throw new TypeError(`unexpected accessor on global property: ${name}`);\\n        }\\n\\n        defineProperty(namedIntrinsics, name, desc);\\n      }\\n    }\\n\\n    return namedIntrinsics;\\n  }\\n\\n  function getAllPrimordials(global, anonIntrinsics) {\\n\\n    const root = {\\n      global, // global plus all the namedIntrinsics\\n      anonIntrinsics,\\n    };\\n    // todo: re-examine exactly which \\\"global\\\" we're freezing\\n\\n    return root;\\n  }\\n\\n  function getAllPrimordials$1(namedIntrinsics, anonIntrinsics) {\\n\\n    const root = {\\n      namedIntrinsics,\\n      anonIntrinsics,\\n    };\\n\\n    return root;\\n  }\\n\\n  // Copyright (C) 2011 Google Inc.\\n  // Copyright (C) 2018 Agoric\\n  //\\n  // Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  // you may not use this file except in compliance with the License.\\n  // You may obtain a copy of the License at\\n  //\\n  // http://www.apache.org/licenses/LICENSE-2.0\\n  //\\n  // Unless required by applicable law or agreed to in writing, software\\n  // distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  // See the License for the specific language governing permissions and\\n  // limitations under the License.\\n\\n  /**\\n   * @fileoverview Exports {@code ses.whitelist}, a recursively defined\\n   * JSON record enumerating all the naming paths in the ES5.1 spec,\\n   * those de-facto extensions that we judge to be safe, and SES and\\n   * Dr. SES extensions provided by the SES runtime.\\n   *\\n   * <p>Assumes only ES3. Compatible with ES5, ES5-strict, or\\n   * anticipated ES6.\\n   *\\n   * //provides ses.whitelist\\n   * @author Mark S. Miller,\\n   * @overrides ses, whitelistModule\\n   */\\n\\n  /**\\n   * <p>Each JSON record enumerates the disposition of the properties on\\n   * some corresponding primordial object, with the root record\\n   * representing the global object. For each such record, the values\\n   * associated with its property names can be\\n   * <ul>\\n   * <li>Another record, in which case this property is simply\\n   *     whitelisted and that next record represents the disposition of\\n   *     the object which is its value. For example, {@code \\\"Object\\\"}\\n   *     leads to another record explaining what properties {@code\\n   *     \\\"Object\\\"} may have and how each such property, if present,\\n   *     and its value should be tamed.\\n   * <li>true, in which case this property is simply whitelisted. The\\n   *     value associated with that property is still traversed and\\n   *     tamed, but only according to the taming of the objects that\\n   *     object inherits from. For example, {@code \\\"Object.freeze\\\"} leads\\n   *     to true, meaning that the {@code \\\"freeze\\\"} property of {@code\\n   *     Object} should be whitelisted and the value of the property (a\\n   *     function) should be further tamed only according to the\\n   *     markings of the other objects it inherits from, like {@code\\n   *     \\\"Function.prototype\\\"} and {@code \\\"Object.prototype\\\").\\n   *     If the property is an accessor property, it is not\\n   *     whitelisted (as invoking an accessor might not be meaningful,\\n   *     yet the accessor might return a value needing taming).\\n   * <li>\\\"maybeAccessor\\\", in which case this accessor property is simply\\n   *     whitelisted and its getter and/or setter are tamed according to\\n   *     inheritance. If the property is not an accessor property, its\\n   *     value is tamed according to inheritance.\\n   * <li>\\\"*\\\", in which case this property on this object is whitelisted,\\n   *     as is this property as inherited by all objects that inherit\\n   *     from this object. The values associated with all such properties\\n   *     are still traversed and tamed, but only according to the taming\\n   *     of the objects that object inherits from. For example, {@code\\n   *     \\\"Object.prototype.constructor\\\"} leads to \\\"*\\\", meaning that we\\n   *     whitelist the {@code \\\"constructor\\\"} property on {@code\\n   *     Object.prototype} and on every object that inherits from {@code\\n   *     Object.prototype} that does not have a conflicting mark. Each\\n   *     of these is tamed as if with true, so that the value of the\\n   *     property is further tamed according to what other objects it\\n   *     inherits from.\\n   * <li>false, which suppresses permission inherited via \\\"*\\\".\\n   * </ul>\\n   *\\n   * <p>TODO: We want to do for constructor: something weaker than '*',\\n   * but rather more like what we do for [[Prototype]] links, which is\\n   * that it is whitelisted only if it points at an object which is\\n   * otherwise reachable by a whitelisted path.\\n   *\\n   * <p>The members of the whitelist are either\\n   * <ul>\\n   * <li>(uncommented) defined by the ES5.1 normative standard text,\\n   * <li>(questionable) provides a source of non-determinism, in\\n   *     violation of pure object-capability rules, but allowed anyway\\n   *     since we've given up on restricting JavaScript to a\\n   *     deterministic subset.\\n   * <li>(ES5 Appendix B) common elements of de facto JavaScript\\n   *     described by the non-normative Appendix B.\\n   * <li>(Harmless whatwg) extensions documented at\\n   *     <a href=\\\"http://wiki.whatwg.org/wiki/Web_ECMAScript\\\"\\n   *     >http://wiki.whatwg.org/wiki/Web_ECMAScript</a> that seem to be\\n   *     harmless. Note that the RegExp constructor extensions on that\\n   *     page are <b>not harmless</b> and so must not be whitelisted.\\n   * <li>(ES-Harmony proposal) accepted as \\\"proposal\\\" status for\\n   *     EcmaScript-Harmony.\\n   * </ul>\\n   *\\n   * <p>With the above encoding, there are some sensible whitelists we\\n   * cannot express, such as marking a property both with \\\"*\\\" and a JSON\\n   * record. This is an expedient decision based only on not having\\n   * encountered such a need. Should we need this extra expressiveness,\\n   * we'll need to refactor to enable a different encoding.\\n   *\\n   * <p>We factor out {@code true} into the variable {@code t} just to\\n   * get a bit better compression from simple minifiers.\\n   */\\n\\n  const t = true;\\n  const j = true; // included in the Jessie runtime\\n\\n  let TypedArrayWhitelist; // defined and used below\\n\\n  var whitelist = {\\n    // The accessible intrinsics which are not reachable by own\\n    // property name traversal are listed here so that they are\\n    // processed by the whitelist, although this also makes them\\n    // accessible by this path.  See\\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-well-known-intrinsic-objects\\n    // Of these, ThrowTypeError is the only one from ES5. All the\\n    // rest were introduced in ES6.\\n    anonIntrinsics: {\\n      ThrowTypeError: {},\\n      IteratorPrototype: {\\n        // 25.1\\n        // Technically, for SES-on-ES5, we should not need to\\n        // whitelist 'next'. However, browsers are accidentally\\n        // relying on it\\n        // https://bugs.chromium.org/p/v8/issues/detail?id=4769#\\n        // https://bugs.webkit.org/show_bug.cgi?id=154475\\n        // and we will be whitelisting it as we transition to ES6\\n        // anyway, so we unconditionally whitelist it now.\\n        next: '*',\\n        constructor: false,\\n      },\\n      ArrayIteratorPrototype: {},\\n      StringIteratorPrototype: {},\\n      MapIteratorPrototype: {},\\n      SetIteratorPrototype: {},\\n      // AsyncIteratorPrototype does not inherit from IteratorPrototype\\n      AsyncIteratorPrototype: {},\\n\\n      // The %GeneratorFunction% intrinsic is the constructor of\\n      // generator functions, so %GeneratorFunction%.prototype is\\n      // the %Generator% intrinsic, which all generator functions\\n      // inherit from. A generator function is effectively the\\n      // constructor of its generator instances, so, for each\\n      // generator function (e.g., \\\"g1\\\" on the diagram at\\n      // http://people.mozilla.org/~jorendorff/figure-2.png )\\n      // its .prototype is a prototype that its instances inherit\\n      // from. Paralleling this structure, %Generator%.prototype,\\n      // i.e., %GeneratorFunction%.prototype.prototype, is the\\n      // object that all these generator function prototypes inherit\\n      // from. The .next, .return and .throw that generator\\n      // instances respond to are actually the builtin methods they\\n      // inherit from this object.\\n      GeneratorFunction: {\\n        // 25.2\\n        length: '*', // Not sure why this is needed\\n        prototype: {\\n          // 25.4\\n          prototype: {\\n            next: '*',\\n            return: '*',\\n            throw: '*',\\n            constructor: '*', // Not sure why this is needed\\n          },\\n        },\\n      },\\n      AsyncGeneratorFunction: {\\n        // 25.3\\n        length: '*',\\n        prototype: {\\n          // 25.5\\n          prototype: {\\n            next: '*',\\n            return: '*',\\n            throw: '*',\\n            constructor: '*', // Not sure why this is needed\\n          },\\n        },\\n      },\\n      AsyncFunction: {\\n        // 25.7\\n        length: '*',\\n        prototype: '*',\\n      },\\n\\n      TypedArray: (TypedArrayWhitelist = {\\n        // 22.2\\n        length: '*', // does not inherit from Function.prototype on Chrome\\n        name: '*', // ditto\\n        from: t,\\n        of: t,\\n        BYTES_PER_ELEMENT: '*',\\n        prototype: {\\n          buffer: 'maybeAccessor',\\n          byteLength: 'maybeAccessor',\\n          byteOffset: 'maybeAccessor',\\n          copyWithin: '*',\\n          entries: '*',\\n          every: '*',\\n          fill: '*',\\n          filter: '*',\\n          find: '*',\\n          findIndex: '*',\\n          forEach: '*',\\n          includes: '*',\\n          indexOf: '*',\\n          join: '*',\\n          keys: '*',\\n          lastIndexOf: '*',\\n          length: 'maybeAccessor',\\n          map: '*',\\n          reduce: '*',\\n          reduceRight: '*',\\n          reverse: '*',\\n          set: '*',\\n          slice: '*',\\n          some: '*',\\n          sort: '*',\\n          subarray: '*',\\n          values: '*',\\n          BYTES_PER_ELEMENT: '*',\\n        },\\n      }),\\n    },\\n\\n    namedIntrinsics: {\\n      // In order according to\\n      // http://www.ecma-international.org/ecma-262/ with chapter\\n      // numbers where applicable\\n\\n      // 18 The Global Object\\n\\n      // 18.1\\n      Infinity: j,\\n      NaN: j,\\n      undefined: j,\\n\\n      // 18.2\\n      eval: j, // realms-shim depends on having indirect eval in the globals\\n      isFinite: t,\\n      isNaN: t,\\n      parseFloat: t,\\n      parseInt: t,\\n      decodeURI: t,\\n      decodeURIComponent: t,\\n      encodeURI: t,\\n      encodeURIComponent: t,\\n\\n      // 19 Fundamental Objects\\n\\n      Object: {\\n        // 19.1\\n        assign: t, // ES-Harmony\\n        create: t,\\n        defineProperties: t, // ES-Harmony\\n        defineProperty: t,\\n        entries: t, // ES-Harmony\\n        freeze: j,\\n        getOwnPropertyDescriptor: t,\\n        getOwnPropertyDescriptors: t, // proposed ES-Harmony\\n        getOwnPropertyNames: t,\\n        getOwnPropertySymbols: t, // ES-Harmony\\n        getPrototypeOf: t,\\n        is: j, // ES-Harmony\\n        isExtensible: t,\\n        isFrozen: t,\\n        isSealed: t,\\n        keys: t,\\n        preventExtensions: j,\\n        seal: j,\\n        setPrototypeOf: t, // ES-Harmony\\n        values: t, // ES-Harmony\\n\\n        prototype: {\\n          // B.2.2\\n          // We need to prefix __proto__ with ESCAPE so that it doesn't\\n          // just change the prototype of this object.\\n          ESCAPE__proto__: 'maybeAccessor',\\n          __defineGetter__: t,\\n          __defineSetter__: t,\\n          __lookupGetter__: t,\\n          __lookupSetter__: t,\\n\\n          constructor: '*',\\n          hasOwnProperty: t,\\n          isPrototypeOf: t,\\n          propertyIsEnumerable: t,\\n          toLocaleString: '*',\\n          toString: '*',\\n          valueOf: '*',\\n\\n          // Generally allowed\\n          [Symbol.iterator]: '*',\\n          [Symbol.toPrimitive]: '*',\\n          [Symbol.toStringTag]: '*',\\n          [Symbol.unscopables]: '*',\\n        },\\n      },\\n\\n      Function: {\\n        // 19.2\\n        length: t,\\n        prototype: {\\n          apply: t,\\n          bind: t,\\n          call: t,\\n          [Symbol.hasInstance]: '*',\\n\\n          // 19.2.4 instances\\n          length: '*',\\n          name: '*', // ES-Harmony\\n          prototype: '*',\\n          arity: '*', // non-std, deprecated in favor of length\\n\\n          // Generally allowed\\n          [Symbol.species]: 'maybeAccessor', // ES-Harmony?\\n        },\\n      },\\n\\n      Boolean: {\\n        // 19.3\\n        prototype: t,\\n      },\\n\\n      Symbol: {\\n        // 19.4               all ES-Harmony\\n        asyncIterator: t, // proposed? ES-Harmony\\n        for: t,\\n        hasInstance: t,\\n        isConcatSpreadable: t,\\n        iterator: t,\\n        keyFor: t,\\n        match: t,\\n        matchAll: t,\\n        replace: t,\\n        search: t,\\n        species: t,\\n        split: t,\\n        toPrimitive: t,\\n        toStringTag: t,\\n        unscopables: t,\\n        prototype: t,\\n      },\\n\\n      Error: {\\n        // 19.5\\n        prototype: {\\n          name: '*',\\n          message: '*',\\n        },\\n      },\\n      // In ES6 the *Error \\\"subclasses\\\" of Error inherit from Error,\\n      // since constructor inheritance generally mirrors prototype\\n      // inheritance. As explained at\\n      // https://code.google.com/p/google-caja/issues/detail?id=1963 ,\\n      // debug.js hides away the Error constructor itself, and so needs\\n      // to rewire these \\\"subclass\\\" constructors. Until we have a more\\n      // general mechanism, please maintain this list of whitelisted\\n      // subclasses in sync with the list in debug.js of subclasses to\\n      // be rewired.\\n      EvalError: {\\n        prototype: t,\\n      },\\n      RangeError: {\\n        prototype: t,\\n      },\\n      ReferenceError: {\\n        prototype: t,\\n      },\\n      SyntaxError: {\\n        prototype: t,\\n      },\\n      TypeError: {\\n        prototype: t,\\n      },\\n      URIError: {\\n        prototype: t,\\n      },\\n\\n      // 20 Numbers and Dates\\n\\n      Number: {\\n        // 20.1\\n        EPSILON: t, // ES-Harmony\\n        isFinite: j, // ES-Harmony\\n        isInteger: t, // ES-Harmony\\n        isNaN: j, // ES-Harmony\\n        isSafeInteger: j, // ES-Harmony\\n        MAX_SAFE_INTEGER: j, // ES-Harmony\\n        MAX_VALUE: t,\\n        MIN_SAFE_INTEGER: j, // ES-Harmony\\n        MIN_VALUE: t,\\n        NaN: t,\\n        NEGATIVE_INFINITY: t,\\n        parseFloat: t, // ES-Harmony\\n        parseInt: t, // ES-Harmony\\n        POSITIVE_INFINITY: t,\\n        prototype: {\\n          toExponential: t,\\n          toFixed: t,\\n          toPrecision: t,\\n        },\\n      },\\n\\n      Math: {\\n        // 20.2\\n        E: j,\\n        LN10: j,\\n        LN2: j,\\n        LOG10E: t,\\n        LOG2E: t,\\n        PI: j,\\n        SQRT1_2: t,\\n        SQRT2: t,\\n\\n        abs: j,\\n        acos: t,\\n        acosh: t, // ES-Harmony\\n        asin: t,\\n        asinh: t, // ES-Harmony\\n        atan: t,\\n        atanh: t, // ES-Harmony\\n        atan2: t,\\n        cbrt: t, // ES-Harmony\\n        ceil: j,\\n        clz32: t, // ES-Harmony\\n        cos: t,\\n        cosh: t, // ES-Harmony\\n        exp: t,\\n        expm1: t, // ES-Harmony\\n        floor: j,\\n        fround: t, // ES-Harmony\\n        hypot: t, // ES-Harmony\\n        imul: t, // ES-Harmony\\n        log: j,\\n        log1p: t, // ES-Harmony\\n        log10: j, // ES-Harmony\\n        log2: j, // ES-Harmony\\n        max: j,\\n        min: j,\\n        pow: j,\\n        random: t, // questionable\\n        round: j,\\n        sign: t, // ES-Harmony\\n        sin: t,\\n        sinh: t, // ES-Harmony\\n        sqrt: j,\\n        tan: t,\\n        tanh: t, // ES-Harmony\\n        trunc: j, // ES-Harmony\\n      },\\n\\n      // no-arg Date constructor is questionable\\n      Date: {\\n        // 20.3\\n        now: t, // questionable\\n        parse: t,\\n        UTC: t,\\n        prototype: {\\n          // Note: coordinate this list with maintanence of repairES5.js\\n          getDate: t,\\n          getDay: t,\\n          getFullYear: t,\\n          getHours: t,\\n          getMilliseconds: t,\\n          getMinutes: t,\\n          getMonth: t,\\n          getSeconds: t,\\n          getTime: t,\\n          getTimezoneOffset: t,\\n          getUTCDate: t,\\n          getUTCDay: t,\\n          getUTCFullYear: t,\\n          getUTCHours: t,\\n          getUTCMilliseconds: t,\\n          getUTCMinutes: t,\\n          getUTCMonth: t,\\n          getUTCSeconds: t,\\n          setDate: t,\\n          setFullYear: t,\\n          setHours: t,\\n          setMilliseconds: t,\\n          setMinutes: t,\\n          setMonth: t,\\n          setSeconds: t,\\n          setTime: t,\\n          setUTCDate: t,\\n          setUTCFullYear: t,\\n          setUTCHours: t,\\n          setUTCMilliseconds: t,\\n          setUTCMinutes: t,\\n          setUTCMonth: t,\\n          setUTCSeconds: t,\\n          toDateString: t,\\n          toISOString: t,\\n          toJSON: t,\\n          toLocaleDateString: t,\\n          toLocaleString: t,\\n          toLocaleTimeString: t,\\n          toTimeString: t,\\n          toUTCString: t,\\n\\n          // B.2.4\\n          getYear: t,\\n          setYear: t,\\n          toGMTString: t,\\n        },\\n      },\\n\\n      // 21 Text Processing\\n\\n      String: {\\n        // 21.2\\n        fromCharCode: j,\\n        fromCodePoint: t, // ES-Harmony\\n        raw: j, // ES-Harmony\\n        prototype: {\\n          charAt: t,\\n          charCodeAt: t,\\n          codePointAt: t, // ES-Harmony\\n          concat: t,\\n          endsWith: j, // ES-Harmony\\n          includes: t, // ES-Harmony\\n          indexOf: j,\\n          lastIndexOf: j,\\n          localeCompare: t,\\n          match: t,\\n          normalize: t, // ES-Harmony\\n          padEnd: t, // ES-Harmony\\n          padStart: t, // ES-Harmony\\n          repeat: t, // ES-Harmony\\n          replace: t,\\n          search: t,\\n          slice: j,\\n          split: t,\\n          startsWith: j, // ES-Harmony\\n          substring: t,\\n          toLocaleLowerCase: t,\\n          toLocaleUpperCase: t,\\n          toLowerCase: t,\\n          toUpperCase: t,\\n          trim: t,\\n\\n          // B.2.3\\n          substr: t,\\n          anchor: t,\\n          big: t,\\n          blink: t,\\n          bold: t,\\n          fixed: t,\\n          fontcolor: t,\\n          fontsize: t,\\n          italics: t,\\n          link: t,\\n          small: t,\\n          strike: t,\\n          sub: t,\\n          sup: t,\\n\\n          trimLeft: t, // non-standard\\n          trimRight: t, // non-standard\\n\\n          // 21.1.4 instances\\n          length: '*',\\n        },\\n      },\\n\\n      RegExp: {\\n        // 21.2\\n        prototype: {\\n          exec: t,\\n          flags: 'maybeAccessor',\\n          global: 'maybeAccessor',\\n          ignoreCase: 'maybeAccessor',\\n          [Symbol.match]: '*', // ES-Harmony\\n          multiline: 'maybeAccessor',\\n          [Symbol.replace]: '*', // ES-Harmony\\n          [Symbol.search]: '*', // ES-Harmony\\n          source: 'maybeAccessor',\\n          [Symbol.split]: '*', // ES-Harmony\\n          sticky: 'maybeAccessor',\\n          test: t,\\n          unicode: 'maybeAccessor', // ES-Harmony\\n          dotAll: 'maybeAccessor', // proposed ES-Harmony\\n\\n          // B.2.5\\n          compile: false, // UNSAFE. Purposely suppressed\\n\\n          // 21.2.6 instances\\n          lastIndex: '*',\\n          options: '*', // non-std\\n        },\\n      },\\n\\n      // 22 Indexed Collections\\n\\n      Array: {\\n        // 22.1\\n        from: j,\\n        isArray: t,\\n        of: j, // ES-Harmony?\\n        prototype: {\\n          concat: t,\\n          copyWithin: t, // ES-Harmony\\n          entries: t, // ES-Harmony\\n          every: t,\\n          fill: t, // ES-Harmony\\n          filter: j,\\n          find: t, // ES-Harmony\\n          findIndex: t, // ES-Harmony\\n          forEach: j,\\n          includes: t, // ES-Harmony\\n          indexOf: j,\\n          join: t,\\n          keys: t, // ES-Harmony\\n          lastIndexOf: j,\\n          map: j,\\n          pop: j,\\n          push: j,\\n          reduce: j,\\n          reduceRight: j,\\n          reverse: t,\\n          shift: j,\\n          slice: j,\\n          some: t,\\n          sort: t,\\n          splice: t,\\n          unshift: j,\\n          values: t, // ES-Harmony\\n\\n          // 22.1.4 instances\\n          length: '*',\\n        },\\n      },\\n\\n      // 22.2 Typed Array stuff\\n      // TODO: Not yet organized according to spec order\\n\\n      Int8Array: TypedArrayWhitelist,\\n      Uint8Array: TypedArrayWhitelist,\\n      Uint8ClampedArray: TypedArrayWhitelist,\\n      Int16Array: TypedArrayWhitelist,\\n      Uint16Array: TypedArrayWhitelist,\\n      Int32Array: TypedArrayWhitelist,\\n      Uint32Array: TypedArrayWhitelist,\\n      Float32Array: TypedArrayWhitelist,\\n      Float64Array: TypedArrayWhitelist,\\n\\n      // 23 Keyed Collections          all ES-Harmony\\n\\n      Map: {\\n        // 23.1\\n        prototype: {\\n          clear: j,\\n          delete: j,\\n          entries: j,\\n          forEach: j,\\n          get: j,\\n          has: j,\\n          keys: j,\\n          set: j,\\n          size: 'maybeAccessor',\\n          values: j,\\n        },\\n      },\\n\\n      Set: {\\n        // 23.2\\n        prototype: {\\n          add: j,\\n          clear: j,\\n          delete: j,\\n          entries: j,\\n          forEach: j,\\n          has: j,\\n          keys: j,\\n          size: 'maybeAccessor',\\n          values: j,\\n        },\\n      },\\n\\n      WeakMap: {\\n        // 23.3\\n        prototype: {\\n          // Note: coordinate this list with maintenance of repairES5.js\\n          delete: j,\\n          get: j,\\n          has: j,\\n          set: j,\\n        },\\n      },\\n\\n      WeakSet: {\\n        // 23.4\\n        prototype: {\\n          add: j,\\n          delete: j,\\n          has: j,\\n        },\\n      },\\n\\n      // 24 Structured Data\\n\\n      ArrayBuffer: {\\n        // 24.1            all ES-Harmony\\n        isView: t,\\n        length: t, // does not inherit from Function.prototype on Chrome\\n        name: t, // ditto\\n        prototype: {\\n          byteLength: 'maybeAccessor',\\n          slice: t,\\n        },\\n      },\\n\\n      // 24.2 TODO: Omitting SharedArrayBuffer for now\\n\\n      DataView: {\\n        // 24.3               all ES-Harmony\\n        length: t, // does not inherit from Function.prototype on Chrome\\n        name: t, // ditto\\n        BYTES_PER_ELEMENT: '*', // non-standard. really?\\n        prototype: {\\n          buffer: 'maybeAccessor',\\n          byteOffset: 'maybeAccessor',\\n          byteLength: 'maybeAccessor',\\n          getFloat32: t,\\n          getFloat64: t,\\n          getInt8: t,\\n          getInt16: t,\\n          getInt32: t,\\n          getUint8: t,\\n          getUint16: t,\\n          getUint32: t,\\n          setFloat32: t,\\n          setFloat64: t,\\n          setInt8: t,\\n          setInt16: t,\\n          setInt32: t,\\n          setUint8: t,\\n          setUint16: t,\\n          setUint32: t,\\n        },\\n      },\\n\\n      // 24.4 TODO: Omitting Atomics for now\\n\\n      JSON: {\\n        // 24.5\\n        parse: j,\\n        stringify: j,\\n      },\\n\\n      // 25 Control Abstraction Objects\\n\\n      Promise: {\\n        // 25.4\\n        all: j,\\n        race: j,\\n        reject: j,\\n        resolve: j,\\n        makeHandled: t, // eventual-send\\n        prototype: {\\n          catch: t,\\n          then: j,\\n          finally: t, // proposed ES-Harmony\\n\\n          // eventual-send\\n          delete: t,\\n          get: t,\\n          put: t,\\n          post: t,\\n          invoke: t,\\n          fapply: t,\\n          fcall: t,\\n\\n          // nanoq.js\\n          del: t,\\n\\n          // Temporary compat with the old makeQ.js\\n          send: t,\\n          end: t,\\n        },\\n      },\\n\\n      // nanoq.js\\n      Q: {\\n        all: t,\\n        race: t,\\n        reject: t,\\n        resolve: t,\\n\\n        join: t,\\n        isPassByCopy: t,\\n        passByCopy: t,\\n        makeRemote: t,\\n        makeFar: t,\\n\\n        // Temporary compat with the old makeQ.js\\n        shorten: t,\\n        isPromise: t,\\n        async: t,\\n        rejected: t,\\n        promise: t,\\n        delay: t,\\n        memoize: t,\\n        defer: t,\\n      },\\n\\n      // 26 Reflection\\n\\n      Reflect: {\\n        // 26.1\\n        apply: t,\\n        construct: t,\\n        defineProperty: t,\\n        deleteProperty: t,\\n        get: t,\\n        getOwnPropertyDescriptor: t,\\n        getPrototypeOf: t,\\n        has: t,\\n        isExtensible: t,\\n        ownKeys: t,\\n        preventExtensions: t,\\n        set: t,\\n        setPrototypeOf: t,\\n      },\\n\\n      Proxy: {\\n        // 26.2\\n        revocable: t,\\n      },\\n\\n      // Appendix B\\n\\n      // B.2.1\\n      escape: t,\\n      unescape: t,\\n\\n      // B.2.5 (RegExp.prototype.compile) is marked 'false' up in 21.2\\n\\n      // Other\\n\\n      StringMap: {\\n        // A specialized approximation of ES-Harmony's Map.\\n        prototype: {}, // Technically, the methods should be on the prototype,\\n        // but doing so while preserving encapsulation will be\\n        // needlessly expensive for current usage.\\n      },\\n\\n      Realm: {\\n        makeRootRealm: t,\\n        makeCompartment: t,\\n        prototype: {\\n          global: 'maybeAccessor',\\n          evaluate: t,\\n        },\\n      },\\n\\n      SES: {\\n        confine: t,\\n        confineExpr: t,\\n      },\\n\\n      Nat: j,\\n      def: j,\\n    },\\n  };\\n\\n  function makeConsole(parentConsole) {\\n    /* 'parentConsole' is the parent Realm's original 'console' object. We must\\n       wrap it, exposing a 'console' with a 'console.log' (and perhaps others)\\n       to the local realm, without allowing access to the original 'console',\\n       its return values, or its exception objects, any of which could be used\\n       to break confinement via the unsafe Function constructor. */\\n\\n    // callAndWrapError is copied from proposal-realms/shim/src/realmFacade.js\\n    // Like Realm.apply except that it catches anything thrown and rethrows it\\n    // as an Error from this realm\\n\\n    const errorConstructors = new Map([\\n      ['EvalError', EvalError],\\n      ['RangeError', RangeError],\\n      ['ReferenceError', ReferenceError],\\n      ['SyntaxError', SyntaxError],\\n      ['TypeError', TypeError],\\n      ['URIError', URIError],\\n    ]);\\n\\n    function callAndWrapError(target, ...args) {\\n      try {\\n        return target(...args);\\n      } catch (err) {\\n        if (Object(err) !== err) {\\n          // err is a primitive value, which is safe to rethrow\\n          throw err;\\n        }\\n        let eName;\\n        let eMessage;\\n        let eStack;\\n        try {\\n          // The child environment might seek to use 'err' to reach the\\n          // parent's intrinsics and corrupt them. `${err.name}` will cause\\n          // string coercion of 'err.name'. If err.name is an object (probably\\n          // a String of the parent Realm), the coercion uses\\n          // err.name.toString(), which is under the control of the parent. If\\n          // err.name were a primitive (e.g. a number), it would use\\n          // Number.toString(err.name), using the child's version of Number\\n          // (which the child could modify to capture its argument for later\\n          // use), however primitives don't have properties like .prototype so\\n          // they aren't useful for an attack.\\n          eName = `${err.name}`;\\n          eMessage = `${err.message}`;\\n          eStack = `${err.stack || eMessage}`;\\n          // eName/eMessage/eStack are now child-realm primitive strings, and\\n          // safe to expose\\n        } catch (ignored) {\\n          // if err.name.toString() throws, keep the (parent realm) Error away\\n          // from the child\\n          throw new Error('unknown error');\\n        }\\n        const ErrorConstructor = errorConstructors.get(eName) || Error;\\n        try {\\n          throw new ErrorConstructor(eMessage);\\n        } catch (err2) {\\n          err2.stack = eStack; // replace with the captured inner stack\\n          throw err2;\\n        }\\n      }\\n    }\\n\\n    const newConsole = {};\\n    const passThrough = [\\n      'log',\\n      'info',\\n      'warn',\\n      'error',\\n      'group',\\n      'groupEnd',\\n      'trace',\\n      'time',\\n      'timeLog',\\n      'timeEnd',\\n    ];\\n    // TODO: those are the properties that MDN documents. Node.js has a bunch\\n    // of additional ones that I didn't include, which might be appropriate.\\n\\n    passThrough.forEach(name => {\\n      // TODO: do we reveal the presence/absence of these properties to the\\n      // child realm, thus exposing nondeterminism (and a hint of what platform\\n      // you might be on) when it is constructed with {consoleMode: allow} ? Or\\n      // should we expose the same set all the time, but silently ignore calls\\n      // to the missing ones, to hide that variation? We might even consider\\n      // adding console.* to the child realm all the time, even without\\n      // consoleMode:allow, but ignore the calls unless the mode is enabled.\\n      if (name in parentConsole) {\\n        const orig = parentConsole[name];\\n        // TODO: in a stack trace, this appears as\\n        // \\\"Object.newConsole.(anonymous function) [as trace]\\\"\\n        // can we make that \\\"newConsole.trace\\\" ?\\n        newConsole[name] = function newerConsole(...args) {\\n          callAndWrapError(orig, ...args);\\n        };\\n      }\\n    });\\n\\n    return newConsole;\\n  }\\n\\n  function makeMakeRequire(r, harden) {\\n    function makeRequire(config) {\\n      const cache = new Map();\\n\\n      function build(what) {\\n        // This approach denies callers the ability to use inheritance to\\n        // manage their config objects, but a simple \\\"if (what in config)\\\"\\n        // predicate would also be truthy for e.g. \\\"toString\\\" and other\\n        // properties of Object.prototype, and require('toString') should be\\n        // legal if and only if the config object included an own-property\\n        // named 'toString'. Incidentally, this could have been\\n        // \\\"config.hasOwnProperty(what)\\\" but eslint complained.\\n        if (!Object.prototype.hasOwnProperty.call(config, what)) {\\n          throw new Error(`Cannot find module '${what}'`);\\n        }\\n        const c = config[what];\\n\\n        // some modules are hard-coded ways to access functionality that SES\\n        // provides directly\\n        if (what === '@agoric/harden') {\\n          return harden;\\n        }\\n\\n        // If the config points at a simple function, it must be a pure\\n        // function with no dependencies (i.e. no 'require' or 'import', no\\n        // calls to other functions defined in the same file but outside the\\n        // function body). We stringify it and evaluate it inside this realm.\\n        if (typeof c === 'function') {\\n          return r.evaluate(`(${c})`);\\n        }\\n\\n        // else we treat it as an object with an 'attenuatorSource' property\\n        // that defines an attenuator function, which we evaluate. We then\\n        // invoke it with the config object, which can contain authorities that\\n        // it can wrap. The return value from this invocation is the module\\n        // object that gets returned from require(). The attenuator function\\n        // and the module it returns are in-realm, the authorities it wraps\\n        // will be out-of-realm.\\n        const src = `(${c.attenuatorSource})`;\\n        const attenuator = r.evaluate(src);\\n        return attenuator(c);\\n      }\\n\\n      function newRequire(whatArg) {\\n        const what = `${whatArg}`;\\n        if (!cache.has(what)) {\\n          cache.set(what, harden(build(what)));\\n        }\\n        return cache.get(what);\\n      }\\n\\n      return newRequire;\\n    }\\n\\n    return makeRequire;\\n  }\\n\\n  /**\\n   * @fileoverview Exports {@code ses.dataPropertiesToRepair}, a recursively\\n   * defined JSON record enumerating the optimal set of prototype properties\\n   * on primordials that need to be repaired before hardening.\\n   *\\n   * //provides ses.dataPropertiesToRepair\\n   * @author JF Paradis\\n   */\\n\\n  /**\\n   * <p>The optimal set of prototype properties that need to be repaired\\n   * before hardening is applied on enviromments subject to the override\\n   * mistake.\\n   *\\n   * <p>Because \\\"repairing\\\" replaces data properties with accessors, every\\n   * time a repaired property is accessed, the associated getter is invoked,\\n   * which degrades the runtime performance of all code executing in the\\n   * repaired enviromment, compared to the non-repaired case. In order\\n   * to maintain performance, we only repair the properties of objects\\n   * for which hardening causes a breakage of their intended usage. There\\n   * are three cases:\\n   * <ul>Overriding properties on objects typically used as maps,\\n   *     namely {@code \\\"Object\\\"} and {@code \\\"Array\\\"}. In the case of arrays,\\n   *     a given program might not be aware that non-numerical properties are\\n   *     stored on the undelying object instance, not on the array. When an\\n   *     object is typically used as a map, we repair all of its prototype\\n   *     properties.\\n   * <ul>Overriding properties on objects that provide defaults on their\\n   *     prototype that programs typically override by assignment, such as\\n   *     {@code \\\"Error.prototype.message\\\"} and {@code \\\"Function.prototype.name\\\"}\\n   *     (both default to \\\"\\\").\\n   * <ul>Setting a prototype chain. The constructor is typically set by\\n   *     assignment, for example {@code \\\"Child.prototype.constructor = Child\\\"}.\\n   *\\n   * <p>Each JSON record enumerates the disposition of the properties on\\n   * some corresponding primordial object, with the root record containing:\\n   * <ul>\\n   * <li>The record for the global object.\\n   * <li>The record for the anonymous intrinsics.\\n   * </ul>\\n   *\\n   * <p>For each such record, the values associated with its property\\n   * names can be:\\n   * <ul>\\n   * <li>Another record, in which case this property is simply left\\n   *     unrepaired and that next record represents the disposition of\\n   *     the object which is its value. For example, {@code \\\"Object\\\"}\\n   *     leads to another record explaining what properties {@code\\n   *     \\\"Object\\\"} may have and how each such property, if present,\\n   *     and its value should be repaired.\\n   * <li>true, in which case this property is simply repaired. The\\n   *     value associated with that property is not traversed. For\\n   * \\t   example, {@code \\\"Function.prototype.name\\\"} leads to true,\\n   *     meaning that the {@code \\\"name\\\"} property of {@code\\n   *     \\\"Function.prototype\\\"} should be repaired (which is needed\\n   *     when inheriting from @code{Function} and setting the subclass's\\n   *     {@code \\\"prototype.name\\\"} property). If the property is\\n   *     already an accessor property, it is not repaired (because\\n   *     accessors are not subject to the override mistake).\\n   * <li>\\\"*\\\", all properties on this object are repaired.\\n   * <li>falsey, in which case this property is skipped.\\n   * </ul>\\n   *\\n   * <p>We factor out {@code true} into the variable {@code t} just to\\n   * get a bit better compression from simple minifiers.\\n   */\\n\\n  const t$1 = true;\\n\\n  var dataPropertiesToRepair = {\\n    namedIntrinsics: {\\n      Object: {\\n        prototype: '*',\\n      },\\n\\n      Array: {\\n        prototype: '*',\\n      },\\n\\n      Function: {\\n        prototype: {\\n          constructor: t$1, // set by \\\"regenerator-runtime\\\"\\n          bind: t$1, // set by \\\"underscore\\\"\\n          name: t$1,\\n          toString: t$1,\\n          call: t$1, // set by \\\"web3.js\\\"\\n        },\\n      },\\n\\n      Error: {\\n        prototype: {\\n          constructor: t$1, // set by \\\"fast-json-patch\\\"\\n          message: t$1,\\n          name: t$1, // set by \\\"precond\\\"\\n        },\\n      },\\n\\n      Promise: {\\n        prototype: {\\n          constructor: t$1, // set by \\\"core-js\\\"\\n        },\\n      },\\n    },\\n\\n    anonIntrinsics: {\\n      TypedArray: {\\n        prototype: '*',\\n      },\\n\\n      GeneratorFunction: {\\n        prototype: {\\n          constructor: t$1,\\n          name: t$1,\\n          toString: t$1,\\n        },\\n      },\\n\\n      AsyncFunction: {\\n        prototype: {\\n          constructor: t$1,\\n          name: t$1,\\n          toString: t$1,\\n        },\\n      },\\n\\n      AsyncGeneratorFunction: {\\n        prototype: {\\n          constructor: t$1,\\n          name: t$1,\\n          toString: t$1,\\n        },\\n      },\\n\\n      IteratorPrototype: '*',\\n      ArrayIteratorPrototype: '*',\\n    },\\n  };\\n\\n  // Adapted from SES/Caja\\n  // Copyright (C) 2011 Google Inc.\\n  // https://github.com/google/caja/blob/master/src/com/google/caja/ses/startSES.js\\n  // https://github.com/google/caja/blob/master/src/com/google/caja/ses/repairES5.js\\n\\n  function repairDataProperties(intrinsics, repairPlan) {\\n    // Object.defineProperty is allowed to fail silently,\\n    // use Object.defineProperties instead.\\n\\n    const {\\n      defineProperties,\\n      getOwnPropertyDescriptor,\\n      getOwnPropertyDescriptors,\\n      prototype: { hasOwnProperty },\\n    } = Object;\\n\\n    const { ownKeys } = Reflect;\\n\\n    /**\\n     * For a special set of properties (defined in the repairPlan), it ensures\\n     * that the effect of freezing does not suppress the ability to override\\n     * these properties on derived objects by simple assignment.\\n     *\\n     * Because of lack of sufficient foresight at the time, ES5 unfortunately\\n     * specified that a simple assignment to a non-existent property must fail if\\n     * it would override a non-writable data property of the same name. (In\\n     * retrospect, this was a mistake, but it is now too late and we must live\\n     * with the consequences.) As a result, simply freezing an object to make it\\n     * tamper proof has the unfortunate side effect of breaking previously correct\\n     * code that is considered to have followed JS best practices, if this\\n     * previous code used assignment to override.\\n     */\\n    function enableDerivedOverride(obj, prop, desc) {\\n      if ('value' in desc && desc.configurable) {\\n        const { value } = desc;\\n\\n        // eslint-disable-next-line no-inner-declarations\\n        function getter() {\\n          return value;\\n        }\\n\\n        // Re-attach the data property on the object so\\n        // it can be found by the deep-freeze traversal process.\\n        getter.value = value;\\n\\n        // eslint-disable-next-line no-inner-declarations\\n        function setter(newValue) {\\n          if (obj === this) {\\n            throw new TypeError(\\n              `Cannot assign to read only property '${prop}' of object '${obj}'`,\\n            );\\n          }\\n          if (hasOwnProperty.call(this, prop)) {\\n            this[prop] = newValue;\\n          } else {\\n            defineProperties(this, {\\n              [prop]: {\\n                value: newValue,\\n                writable: true,\\n                enumerable: desc.enumerable,\\n                configurable: desc.configurable,\\n              },\\n            });\\n          }\\n        }\\n\\n        defineProperties(obj, {\\n          [prop]: {\\n            get: getter,\\n            set: setter,\\n            enumerable: desc.enumerable,\\n            configurable: desc.configurable,\\n          },\\n        });\\n      }\\n    }\\n\\n    function repairOneProperty(obj, prop) {\\n      if (!obj) {\\n        return;\\n      }\\n      const desc = getOwnPropertyDescriptor(obj, prop);\\n      if (!desc) {\\n        return;\\n      }\\n      enableDerivedOverride(obj, prop, desc);\\n    }\\n\\n    function repairAllProperties(obj) {\\n      if (!obj) {\\n        return;\\n      }\\n      const descs = getOwnPropertyDescriptors(obj);\\n      if (!descs) {\\n        return;\\n      }\\n      ownKeys(descs).forEach(prop =>\\n        enableDerivedOverride(obj, prop, descs[prop]),\\n      );\\n    }\\n\\n    function walkRepairPlan(obj, plan) {\\n      if (!obj) {\\n        return;\\n      }\\n      if (!plan) {\\n        return;\\n      }\\n      ownKeys(plan).forEach(prop => {\\n        const subPlan = plan[prop];\\n        const subObj = obj[prop];\\n        switch (subPlan) {\\n          case true:\\n            repairOneProperty(obj, prop);\\n            break;\\n\\n          case '*':\\n            repairAllProperties(subObj);\\n            break;\\n\\n          default:\\n            if (Object(subPlan) !== subPlan) {\\n              throw TypeError(`Repair plan subPlan ${subPlan} is invalid`);\\n            }\\n            walkRepairPlan(subObj, subPlan);\\n        }\\n      });\\n    }\\n\\n    // Do the repair.\\n    walkRepairPlan(intrinsics, repairPlan);\\n  }\\n\\n  // Copyright (C) 2018 Agoric\\n\\n  const FORWARDED_REALMS_OPTIONS = ['transforms'];\\n\\n  function createSESWithRealmConstructor(creatorStrings, Realm) {\\n    function makeSESRootRealm(options) {\\n      // eslint-disable-next-line no-param-reassign\\n      options = Object(options); // Todo: sanitize\\n      const shims = [];\\n\\n      const {\\n        dataPropertiesToRepair: optDataPropertiesToRepair,\\n        shims: optionalShims,\\n        sloppyGlobals,\\n        whitelist: optWhitelist,\\n        ...optionsRest\\n      } = options;\\n\\n      const wl = JSON.parse(JSON.stringify(optWhitelist || whitelist));\\n      const repairPlan =\\n        optDataPropertiesToRepair !== undefined\\n          ? JSON.parse(JSON.stringify(optDataPropertiesToRepair))\\n          : dataPropertiesToRepair;\\n\\n      // Forward the designated Realms options.\\n      const realmsOptions = {};\\n      FORWARDED_REALMS_OPTIONS.forEach(key => {\\n        if (key in optionsRest) {\\n          realmsOptions[key] = optionsRest[key];\\n        }\\n      });\\n\\n      if (sloppyGlobals) {\\n        throw TypeError(`\\\\\\nsloppyGlobals cannot be specified for makeSESRootRealm!\\nYou probably want a Compartment instead, like:\\n  const c = s.global.Realm.makeCompartment({ sloppyGlobals: true })`);\\n      }\\n\\n      // \\\"allow\\\" enables real Date.now(), anything else gets NaN\\n      // (it'd be nice to allow a fixed numeric value, but too hard to\\n      // implement right now)\\n      if (options.dateNowMode !== 'allow') {\\n        shims.push(`(${tameDate})();`);\\n      }\\n\\n      if (options.mathRandomMode !== 'allow') {\\n        shims.push(`(${tameMath})();`);\\n      }\\n\\n      // Intl is disabled entirely for now, deleted by removeProperties. If we\\n      // want to bring it back (under the control of this option), we'll need\\n      // to add it to the whitelist too, as well as taming it properly.\\n      if (options.intlMode !== 'allow') {\\n        // this shim also disables Object.prototype.toLocaleString\\n        shims.push(`(${tameIntl})();`);\\n      }\\n\\n      if (options.errorStackMode !== 'allow') {\\n        shims.push(`(${tameError})();`);\\n      } else {\\n        // if removeProperties cleans these things from Error, v8 won't provide\\n        // stack traces or even toString on exceptions, and then Node.js prints\\n        // uncaught exceptions as \\\"undefined\\\" instead of a type/message/stack.\\n        // So if we're allowing stack traces, make sure the whitelist is\\n        // augmented to include them.\\n        wl.namedIntrinsics.Error.captureStackTrace = true;\\n        wl.namedIntrinsics.Error.stackTraceLimit = true;\\n        wl.namedIntrinsics.Error.prepareStackTrace = true;\\n      }\\n\\n      if (options.regexpMode !== 'allow') {\\n        shims.push(`(${tameRegExp})();`);\\n      }\\n\\n      // The getAnonIntrinsics function might be renamed by e.g. rollup. The\\n      // removeProperties() function references it by name, so we need to force\\n      // it to have a specific name.\\n      const removeProp = `const getAnonIntrinsics = (${getAnonIntrinsics$1});\\n               (${removeProperties})(this, ${JSON.stringify(wl)})`;\\n      shims.push(removeProp);\\n\\n      // Add options.shims.\\n      if (optionalShims) {\\n        shims.push(...optionalShims);\\n      }\\n\\n      const r = Realm.makeRootRealm({ ...realmsOptions, shims });\\n\\n      // Build a harden() with an empty fringe. It will be populated later when\\n      // we call harden(allIntrinsics).\\n      const makeHardenerSrc = `(${makeHardener})`;\\n      const harden = r.evaluate(makeHardenerSrc)();\\n\\n      const b = r.evaluate(creatorStrings);\\n      b.createSESInThisRealm(r.global, creatorStrings, r);\\n      // b.removeProperties(r.global);\\n\\n      if (options.consoleMode === 'allow') {\\n        const s = `(${makeConsole})`;\\n        r.global.console = r.evaluate(s)(console);\\n      }\\n\\n      // Extract the intrinsics from the global.\\n      const anonIntrinsics = r.evaluate(`(${getAnonIntrinsics$1})`)(r.global);\\n      const namedIntrinsics = r.evaluate(`(${getNamedIntrinsics})`)(\\n        r.global,\\n        whitelist,\\n      );\\n\\n      // Gather the intrinsics only.\\n      const allIntrinsics = r.evaluate(`(${getAllPrimordials$1})`)(\\n        namedIntrinsics,\\n        anonIntrinsics,\\n      );\\n\\n      // Gather the primordials and the globals.\\n      const allPrimordials = r.evaluate(`(${getAllPrimordials})`)(\\n        r.global,\\n        anonIntrinsics,\\n      );\\n\\n      // Repair the override mistake on the intrinsics only.\\n      r.evaluate(`(${repairDataProperties})`)(allIntrinsics, repairPlan);\\n\\n      // Finally freeze all the primordials, and the global object. This must\\n      // be the last thing we do that modifies the Realm's globals.\\n      harden(allPrimordials);\\n\\n      // build the makeRequire helper, glue it to the new Realm\\n      r.makeRequire = harden(r.evaluate(`(${makeMakeRequire})`)(r, harden));\\n      return r;\\n    }\\n    const SES = {\\n      makeSESRootRealm,\\n    };\\n\\n    return SES;\\n  }\\n\\n  function createSESInThisRealm(global, creatorStrings, parentRealm) {\\n    // eslint-disable-next-line no-param-reassign,no-undef\\n    global.SES = createSESWithRealmConstructor(creatorStrings, Realm);\\n    // todo: wrap exceptions, effectively undoing the wrapping that\\n    // Realm.evaluate does\\n\\n    const errorConstructors = new Map([\\n      ['EvalError', EvalError],\\n      ['RangeError', RangeError],\\n      ['ReferenceError', ReferenceError],\\n      ['SyntaxError', SyntaxError],\\n      ['TypeError', TypeError],\\n      ['URIError', URIError],\\n    ]);\\n\\n    // callAndWrapError is copied from the Realm shim. Our SES.confine (from\\n    // inside the realm) delegates to Realm.evaluate (from outside the realm),\\n    // but we need the exceptions to come from our own realm, so we use this to\\n    // reverse the shim's own callAndWrapError. TODO: look for a reasonable way\\n    // to avoid the double-wrapping, maybe by changing the shim/Realms-spec to\\n    // provide the safeEvaluator as a Realm.evaluate method (inside a realm).\\n    // That would make this trivial: global.SES = Realm.evaluate (modulo\\n    // potential 'this' issues)\\n\\n    // the comments here were written from the POV of a parent defending itself\\n    // against a malicious child realm. In this case, we are the child.\\n\\n    function callAndWrapError(target, ...args) {\\n      try {\\n        return target(...args);\\n      } catch (err) {\\n        if (Object(err) !== err) {\\n          // err is a primitive value, which is safe to rethrow\\n          throw err;\\n        }\\n        let eName;\\n        let eMessage;\\n        let eStack;\\n        try {\\n          // The child environment might seek to use 'err' to reach the\\n          // parent's intrinsics and corrupt them. `${err.name}` will cause\\n          // string coercion of 'err.name'. If err.name is an object (probably\\n          // a String of the parent Realm), the coercion uses\\n          // err.name.toString(), which is under the control of the parent. If\\n          // err.name were a primitive (e.g. a number), it would use\\n          // Number.toString(err.name), using the child's version of Number\\n          // (which the child could modify to capture its argument for later\\n          // use), however primitives don't have properties like .prototype so\\n          // they aren't useful for an attack.\\n          eName = `${err.name}`;\\n          eMessage = `${err.message}`;\\n          eStack = `${err.stack || eMessage}`;\\n          // eName/eMessage/eStack are now child-realm primitive strings, and\\n          // safe to expose\\n        } catch (ignored) {\\n          // if err.name.toString() throws, keep the (parent realm) Error away\\n          // from the child\\n          throw new Error('unknown error');\\n        }\\n        const ErrorConstructor = errorConstructors.get(eName) || Error;\\n        try {\\n          throw new ErrorConstructor(eMessage);\\n        } catch (err2) {\\n          err2.stack = eStack; // replace with the captured inner stack\\n          throw err2;\\n        }\\n      }\\n    }\\n\\n    // We must not allow other child code to access that object. SES.confine\\n    // closes over the parent's Realm object so it shouldn't be accessible from\\n    // the outside.\\n\\n    // eslint-disable-next-line no-param-reassign\\n    global.SES.confine = (code, endowments) =>\\n      callAndWrapError(() => parentRealm.evaluate(code, endowments));\\n    // eslint-disable-next-line no-param-reassign\\n    global.SES.confineExpr = (code, endowments) =>\\n      callAndWrapError(() => parentRealm.evaluate(`(${code})`, endowments));\\n  }\\n\\n  exports.createSESInThisRealm = createSESInThisRealm;\\n  exports.createSESWithRealmConstructor = createSESWithRealmConstructor;\\n\\n  return exports;\\n\\n}({}))\",K)}))}(),n.exports}(),realm=SES.makeSESRootRealm({mathRandomMode:\"allow\",errorStackMode:\"allow\"}),sesRequire=realm.makeRequire({\"@agoric/harden\":!0}),harden=sesRequire(\"@agoric/harden\"),sesifyConfig={};return loadBundle;function evalWithEndowments(code,endowments){with(endowments)return eval(code)}function loadBundle(modules,_,entryPoints){if(\"undefined\"!=typeof process&&process.env.MODULE_DUMP){const e=modules[process.env.MODULE_DUMP];return void console.log(JSON.stringify(e))}const globalRef=\"undefined\"!=typeof self?self:global,globalCache={},createInternalRequire=realm.evaluate(`(${internalRequireWrapper})`,{console:console}),safeInternalRequire=createInternalRequire(modules,globalCache,sesifyConfig,realm,harden,eval,evalWithEndowments,globalRef);for(let e of entryPoints)safeInternalRequire(e,null,[])}function internalRequireWrapper(e,n,t,r,o,a,i,s){const c=new Map;return l;function l(a,u,d){const f=e[a];if(!f){const e=new Error(\"Cannot find module '\"+a+\"'\");throw e.code=\"MODULE_NOT_FOUND\",e}const y=function(e){const n=[];return e.forEach(e=>{const t=e.split(\"/\");let r=t[0];if([\".\",\"..\"].includes(r))return;const o=r.includes(\"@\")?`${t[0]}/${t[1]}`:r;n.push(o)}),n}(d),m=f.package,g=a;let b=n[g];if(b||(b={},n[g]=b),b[a]){return b[a].exports}const w={exports:{}};b[a]=w;let E=`(${f.source})`;if(f.file){E+=`\\n\\n${`// moduleSource: ${f.file}`}`}const S=h(t,m),v=y.length<1,j=function(e){if(!e.globals)return{};const n={};return Object.entries(e.globals).forEach(([e,t])=>{if(\"write\"===t)return;if(!0!==t)throw new Error(\"Sesify - unknown value for config globals\");const r=function(e,n){const t=n.split(\".\"),r=t.slice(0,-1).join(\".\"),o=t[t.length-1],a=r?function(e,n){let t=e;return n.split(\".\").forEach(e=>{null!==t?void 0!==t&&(t=t[e]):t=void 0}),t}(s,r):s;if(!a)return a;const i=a[o];if(\"function\"==typeof i){const e=i.bind(a);return Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)),e}return i}(0,e);void 0!==r&&function(e,n,t){let r=e;const o=n.split(\".\"),a=o[o.length-1];o.slice(0,-1).forEach(e=>{const t=r;if(null===(r=r[e]))throw new Error('DeepSet - unable to set \"'+n+'\" on null');void 0===r&&(r={},t[e]=r)}),Object.defineProperty(r,a,t)}(n,e,{value:r,configurable:!0,writable:!0,enumerable:!0})}),n}(S);let I=Object.assign({},t.defaultGlobals,u,j);let O;if(I._endowments=I,I.window&&(I=Object.assign({},I.window,I)),\"unfrozen\"!==(S.environment||(v?\"unfrozen\":\"frozen\"))){const e=r.global.Realm.makeCompartment();!function(e,n,t){const r=function(e){return Object.entries(e).filter(([e,n])=>\"write\"===n&&1===e.split(\".\").length).map(([e])=>e)}(n),o=function(e){const n=Object.entries(e).filter(([e,n])=>\"read\"===n||!0===n||\"write\"===n&&e.split(\".\").length>1).map(([e])=>e.split(\".\")[0]);return Array.from(new Set(n))}(n),a=e.global;o.forEach(e=>{Object.defineProperty(a,e,{get:()=>c.has(e)?c.get(e):t[e],set(){console.warn(`sesify: ignoring write attempt to read-access global \"${e}\"`)}})}),r.forEach(e=>{Object.defineProperty(a,e,{get:()=>c.has(e)?c.get(e):t[e],set(n){c.set(e,n)},enumerable:!0,configurable:!0})}),[\"self\",\"window\",\"globalThis\",\"global\"].forEach(e=>{o.includes(e)||r.includes(e)||(a[e]=a)});const i=a.Function,s=e=>i(e).bind(a);Object.defineProperties(s,Object.getOwnPropertyDescriptors(i)),a.Function=s}(e,S.globals||{},I);try{O=e.evaluate(`${E}`)}catch(e){throw console.warn(`Sesify - Error evaluating module \"${a}\" from package \"${m}\"`),e}}else I.global=s,O=i(`${E}`,I);if(\"function\"!=typeof O)throw new Error(\"Sesify - moduleInitializer is not defined correctly\");const P=new Proxy({},{get(e,n){return[function(){const e=l(n,u,d);w.exports=e}]}});try{O.call(w.exports,(function(n,r){return function({requestedName:n,providedEndowments:r,parentModule:o,parentModuleData:a,moduleDepPath:i}){const s=a.package,c=a.id,u=a.deps[n]||n;n in a.deps||console.warn(`missing dep: ${s} requested ${n}`);if(u===c){if(!1===[\"timers\",\"buffer\"].includes(n))throw new Error(`Sesify - recursive require detected: \"${n}\"`);return o.exports}const d=e[u];if(!d){const e=new Error(\"Cannot find module '\"+u+\"'\");throw e.code=\"MODULE_NOT_FOUND\",e}const f=d.package,y=h(t,f),m=i.slice();m.push(n);const g=l(u,r,m);return s&&f===s?g:function(e,n){switch(n.exportsDefense||\"magicCopy\"){case\"magicCopy\":case\"harden\":case\"freeze\":return p(e);default:throw new Error(`Sesify - Unknown exports protection ${containment}`)}}(g,y)}({requestedName:n,providedEndowments:r,parentModule:w,parentModuleData:f,moduleDepPath:y})}),w,w.exports,null,P)}catch(e){throw console.warn(`Sesify - Error instantiating module \"${a}\" from package \"${m}\"`),e}return function(e,n){const t=n.exportsDefense||\"magicCopy\";switch(t){case\"magicCopy\":break;case\"harden\":o(Reflect.getPrototypeOf(e)),o(e);break;case\"freeze\":Object.freeze(e);break;default:throw new Error(`Sesify - Unknown exports protection ${t}`)}return e}(w.exports,S)}function p(e){switch(typeof e){case\"object\":return Array.isArray(e)?u([],e):u({},e);case\"function\":const n=function(...n){return new.target?Reflect.construct(e,n,new.target):Reflect.apply(e,this,n)};return u(n,e),n;default:return e}}function u(e,n){try{const t=Object.getOwnPropertyDescriptors(n);Object.defineProperties(e,t),Reflect.setPrototypeOf(e,Reflect.getPrototypeOf(n))}catch(e){throw console.warn(\"Sesify - Error performing magic copy:\",e.message),e}return e}function h(e,n){return(e.resources||{})[n]||{}}}}()({1:{package:\"<root>\",deps:{},source:function(){return function(e,n,t){}}.call(this)}},{},[1]);",
  "requestedPermissions": null
}